#!/usr/bin/env python3
# üéØ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –§–∞–π–ª: quick_optimize_monitoring.py

"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""

import os
import sys
import subprocess
from pathlib import Path
import asyncio

def run_command(command: str, cwd: str = None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            cwd=cwd,
            capture_output=True, 
            text=True, 
            encoding='utf-8'
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {command}")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
        else:
            print(f"‚ùå {command}")
            if result.stderr.strip():
                print(f"   –û—à–∏–±–∫–∞: {result.stderr.strip()}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MCP Code Analyzer")
    print("=" * 65)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    script_dir = Path(__file__).parent
    api_dir = script_dir / "apps" / "api"
    
    if not api_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {api_dir}")
        return False
    
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {api_dir}")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    print("\nüîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "infrastructure/monitoring/core.py",
        "infrastructure/monitoring/migration_adapter.py", 
        "config/monitoring.py",
        "patches/apply_monitoring_patch.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        full_path = api_dir / file_path
        if full_path.exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path}")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.")
        return False
    
    # –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
    print("\nüîß –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    patch_script = api_dir / "patches" / "apply_monitoring_patch.py"
    if not run_command(f"python {patch_script}", cwd=str(api_dir)):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á")
        return False
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n‚öôÔ∏è –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_file = api_dir / ".env"
    env_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
ENVIRONMENT=development
MONITORING_USE_NEW=true
MONITORING_USE_OLD=false
MONITORING_COMPARE=false
MONITORING_LOG_LEVEL=STANDARD
MONITORING_MAX_EVENTS=1000
MONITORING_BATCH_SIZE=50
MONITORING_SAMPLE_INTERVAL=30.0
MONITORING_AUTO_CLEANUP=true
MONITORING_LOG_FILE=logs/mcp_analyzer_optimized.log
MONITORING_CONSOLE=true
MONITORING_MEMORY_THRESHOLD=85.0
MONITORING_CPU_THRESHOLD=80.0
"""
    
    try:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {env_file}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª: {e}")
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
    print("\nüìÅ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...")
    
    logs_dir = api_dir / "logs"
    logs_dir.mkdir(exist_ok=True)
    print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {logs_dir} –≥–æ—Ç–æ–≤–∞")
    
    # –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\nüß™ –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_script = api_dir / "tests" / "test_monitoring_optimization.py"
    if test_script.exists():
        print("   üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
        if run_command(f"python {test_script}", cwd=str(api_dir)):
            print("   ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("   ‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    else:
        print(f"   ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_script}")
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüéØ –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ main.py –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
    main_py = api_dir / "main.py"
    if main_py.exists():
        with open(main_py, 'r', encoding='utf-8') as f:
            content = f.read()
            
        checks = [
            ("–ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "OPTIMIZED_MONITORING_AVAILABLE"),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", "optimized_monitoring = get_monitoring_system()"),
            ("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "USE_OPTIMIZED_MONITORING")
        ]
        
        for check_name, check_pattern in checks:
            if check_pattern in content:
                print(f"   ‚úÖ {check_name}")
            else:
                print(f"   ‚ùå {check_name}")
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n" + "=" * 65)
    print("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("   ‚îú‚îÄ ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("   ‚îú‚îÄ ‚úÖ –í–Ω–µ–¥—Ä–µ–Ω –±–∞—Ç—á–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚îú‚îÄ ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   ‚îú‚îÄ ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    print("   ‚îú‚îÄ ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
    print("   ‚îî‚îÄ ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–∞—Ç—á–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python main.py")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/")
    print("   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ /api/health")
    print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã")
    
    print("\nüìä –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   ‚îú‚îÄ 70% —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–∞—Ç—á–∏–Ω–≥)")
    print("   ‚îú‚îÄ 60% —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
    print("   ‚îú‚îÄ 5 —É—Ä–æ–≤–Ω–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   ‚îî‚îÄ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            sys.exit(0)
        else:
            print("\n‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
