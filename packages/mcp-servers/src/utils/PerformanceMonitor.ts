/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

export interface PerformanceMetric {
  operation: string;
  duration: number;
  timestamp: number;
  memoryUsage?: number;
  metadata?: Record<string, any>;
}

export interface PerformanceReport {
  totalOperations: number;
  averageDuration: number;
  slowestOperation: PerformanceMetric;
  fastestOperation: PerformanceMetric;
  memoryPeak: number;
  recommendations: string[];
}

export class PerformanceMonitor {
  private metrics: PerformanceMetric[] = [];
  private activeOperations = new Map<string, { startTime: number; startMemory: number }>();

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  startOperation(operationName: string): string {
    const operationId = `${operationName}_${Date.now()}_${Math.random()}`;
    const startTime = performance.now();
    const startMemory = this.getMemoryUsage();

    this.activeOperations.set(operationId, { startTime, startMemory });
    return operationId;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  endOperation(operationId: string, metadata?: Record<string, any>): PerformanceMetric | null {
    const operation = this.activeOperations.get(operationId);
    if (!operation) return null;

    const endTime = performance.now();
    const endMemory = this.getMemoryUsage();
    const duration = endTime - operation.startTime;
    const memoryUsage = endMemory - operation.startMemory;

    const metric: PerformanceMetric = {
      operation: operationId.split('_')[0],
      duration,
      timestamp: Date.now(),
      memoryUsage,
      metadata
    };

    this.metrics.push(metric);
    this.activeOperations.delete(operationId);

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
    if (duration > 5000) { // > 5 —Å–µ–∫—É–Ω–¥
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${metric.operation} –∑–∞–Ω—è–ª–∞ ${duration.toFixed(2)}ms`);
    }

    return metric;
  }

  /**
   * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç–æ–¥–æ–≤
   */
  static monitor(operationName?: string) {
    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
      const originalMethod = descriptor.value;
      const opName = operationName || `${target.constructor.name}.${propertyKey}`;

      descriptor.value = async function (...args: any[]) {
        const monitor = this.performanceMonitor || new PerformanceMonitor();
        const operationId = monitor.startOperation(opName);

        try {
          const result = await originalMethod.apply(this, args);
          monitor.endOperation(operationId, { argsCount: args.length });
          return result;
        } catch (error) {
          monitor.endOperation(operationId, { error: error.message });
          throw error;
        }
      };

      return descriptor;
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  generateReport(): PerformanceReport {
    if (this.metrics.length === 0) {
      return {
        totalOperations: 0,
        averageDuration: 0,
        slowestOperation: null as any,
        fastestOperation: null as any,
        memoryPeak: 0,
        recommendations: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞']
      };
    }

    const durations = this.metrics.map(m => m.duration);
    const averageDuration = durations.reduce((a, b) => a + b, 0) / durations.length;
    
    const slowestOperation = this.metrics.reduce((prev, current) => 
      (prev.duration > current.duration) ? prev : current
    );
    
    const fastestOperation = this.metrics.reduce((prev, current) => 
      (prev.duration < current.duration) ? prev : current
    );

    const memoryPeak = Math.max(...this.metrics.map(m => m.memoryUsage || 0));

    const recommendations = this.generateRecommendations();

    return {
      totalOperations: this.metrics.length,
      averageDuration,
      slowestOperation,
      fastestOperation,
      memoryPeak,
      recommendations
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateRecommendations(): string[] {
    const recommendations: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const slowOperations = this.metrics.filter(m => m.duration > 1000);
    if (slowOperations.length > 0) {
      recommendations.push(`üêå –ù–∞–π–¥–µ–Ω–æ ${slowOperations.length} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (>1—Å). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.`);
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    const highMemoryOps = this.metrics.filter(m => (m.memoryUsage || 0) > 100 * 1024 * 1024); // >100MB
    if (highMemoryOps.length > 0) {
      recommendations.push(`üß† ${highMemoryOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–µ—á–∫–∏.`);
    }

    // –ß–∞—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationCounts = this.metrics.reduce((acc, m) => {
      acc[m.operation] = (acc[m.operation] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const frequentOps = Object.entries(operationCounts)
      .filter(([, count]) => count > 10)
      .sort(([, a], [, b]) => b - a);

    if (frequentOps.length > 0) {
      recommendations.push(`üîÑ –ß–∞—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${frequentOps[0][0]} (${frequentOps[0][1]} —Ä–∞–∑). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ.`);
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (this.metrics.length > 100) {
      recommendations.push('üìä –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–∞—Ç—á–∏–Ω–≥ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é.');
    }

    if (recommendations.length === 0) {
      recommendations.push('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ!');
    }

    return recommendations;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ CSV
   */
  exportToCSV(): string {
    const headers = ['Operation', 'Duration (ms)', 'Timestamp', 'Memory Usage (bytes)', 'Metadata'];
    const rows = this.metrics.map(m => [
      m.operation,
      m.duration.toFixed(2),
      new Date(m.timestamp).toISOString(),
      m.memoryUsage?.toString() || '0',
      JSON.stringify(m.metadata || {})
    ]);

    return [headers, ...rows].map(row => row.join(',')).join('\n');
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
   */
  cleanup(maxAge: number = 24 * 60 * 60 * 1000): void { // 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const cutoff = Date.now() - maxAge;
    this.metrics = this.metrics.filter(m => m.timestamp > cutoff);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
   */
  private getMemoryUsage(): number {
    if (typeof process !== 'undefined' && process.memoryUsage) {
      return process.memoryUsage().heapUsed;
    }
    return 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  getOperationStats(): Record<string, {
    count: number;
    totalDuration: number;
    averageDuration: number;
    maxDuration: number;
    minDuration: number;
  }> {
    const stats: Record<string, any> = {};

    this.metrics.forEach(metric => {
      if (!stats[metric.operation]) {
        stats[metric.operation] = {
          count: 0,
          totalDuration: 0,
          maxDuration: 0,
          minDuration: Infinity
        };
      }

      const stat = stats[metric.operation];
      stat.count++;
      stat.totalDuration += metric.duration;
      stat.maxDuration = Math.max(stat.maxDuration, metric.duration);
      stat.minDuration = Math.min(stat.minDuration, metric.duration);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(stats).forEach(operation => {
      const stat = stats[operation];
      stat.averageDuration = stat.totalDuration / stat.count;
      if (stat.minDuration === Infinity) stat.minDuration = 0;
    });

    return stats;
  }
}
