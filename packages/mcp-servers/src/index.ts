#!/usr/bin/env node

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { 
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';
import { promises as fs } from 'node:fs';
import path from 'node:path';
import { glob } from 'glob';

interface FileAnalysis {
  path: string;
  name: string;
  type: string;
  size: number;
  linesOfCode?: number;
  functions: string[];
  imports: string[];
  exports: string[];
}

interface ProjectAnalysis {
  projectPath: string;
  files: FileAnalysis[];
  dependencies: Array<{
    from: string;
    to: string;
    type: string;
  }>;
  metrics: {
    totalFiles: number;
    totalLines: number;
    totalFunctions: number;
    avgLinesPerFile: number;
    languages: string[];
  };
  architecturePatterns: string[];
}

class CodeAnalyzerServer {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: 'code-analyzer-server',
        version: '1.0.0',
      }
    );

    this.setupToolHandlers();
    
    // Error handling
    this.server.onerror = (error: Error) => console.error('[MCP Error]', error);
    process.on('SIGINT', async () => {
      await this.server.close();
      process.exit(0);
    });
  }

  private setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'analyze_project',
          description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤',
          inputSchema: {
            type: 'object',
            properties: {
              projectPath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞'
              },
              includeTests: {
                type: 'boolean',
                description: '–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∞–Ω–∞–ª–∏–∑',
                default: true
              },
              analysisDepth: {
                type: 'string',
                enum: ['basic', 'medium', 'deep'],
                description: '–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞',
                default: 'medium'
              }
            },
            required: ['projectPath']
          }
        },
        {
          name: 'analyze_file',
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
          inputSchema: {
            type: 'object',
            properties: {
              filePath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
              }
            },
            required: ['filePath']
          }
        }
      ]
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request: any) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'analyze_project':
            return await this.analyzeProject(args as any);
          
          case 'analyze_file':
            return await this.analyzeFile(args as any);
          
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Unknown tool: ${name}`
            );
        }
      } catch (error) {
        if (error instanceof McpError) {
          throw error;
        }
        throw new McpError(
          ErrorCode.InternalError,
          `Error in ${name}: ${error}`
        );
      }
    });
  }

  private async analyzeProject(args: {
    projectPath: string;
    includeTests?: boolean;
    analysisDepth?: 'basic' | 'medium' | 'deep';
  }) {
    const { projectPath, includeTests = true, analysisDepth = 'medium' } = args;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    try {
      await fs.access(projectPath);
    } catch {
      throw new McpError(
        ErrorCode.InvalidRequest,
        `Project path does not exist: ${projectPath}`
      );
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const patterns = [
      '**/*.js',
      '**/*.ts',
      '**/*.jsx',
      '**/*.tsx',
      '**/*.py',
      '**/*.html',
      '**/*.css',
      '**/*.json'
    ];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const ignorePatterns = [
      '**/node_modules/**',
      '**/dist/**',
      '**/build/**',
      '**/.git/**',
      '**/coverage/**'
    ];

    if (!includeTests) {
      ignorePatterns.push(
        '**/*.test.*',
        '**/*.spec.*',
        '**/test/**',
        '**/tests/**'
      );
    }

    const files: FileAnalysis[] = [];
    const dependencies: Array<{ from: string; to: string; type: string }> = [];

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for (const pattern of patterns) {
      const foundFiles = await glob(pattern, {
        cwd: projectPath,
        ignore: ignorePatterns,
        absolute: true
      });

      for (const filePath of foundFiles) {
        try {
          const fileAnalysis = await this.analyzeFileInternal(filePath, analysisDepth);
          files.push(fileAnalysis);

          // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          for (const importPath of fileAnalysis.imports) {
            dependencies.push({
              from: filePath,
              to: importPath,
              type: 'import'
            });
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        }
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const totalLines = files.reduce((sum, file) => sum + (file.linesOfCode || 0), 0);
    const totalFunctions = files.reduce((sum, file) => sum + file.functions.length, 0);
    const languages = [...new Set(files.map(file => file.type))];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const architecturePatterns = this.detectArchitecturePatterns(files);

    const analysis: ProjectAnalysis = {
      projectPath,
      files,
      dependencies,
      metrics: {
        totalFiles: files.length,
        totalLines,
        totalFunctions,
        avgLinesPerFile: files.length > 0 ? totalLines / files.length : 0,
        languages
      },
      architecturePatterns
    };

    return {
      content: [
        {
          type: 'text',
          text: `–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n- –§–∞–π–ª–æ–≤: ${analysis.metrics.totalFiles}\n- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${analysis.metrics.totalLines.toLocaleString()}\n- –§—É–Ω–∫—Ü–∏–π: ${analysis.metrics.totalFunctions}\n- –Ø–∑—ã–∫–æ–≤: ${analysis.metrics.languages.join(', ')}\n\nüèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n${analysis.architecturePatterns.map(p => `- ${p}`).join('\n')}\n\nüìà –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!`
        },
        {
          type: 'text',
          text: JSON.stringify(analysis, null, 2)
        }
      ]
    };
  }

  private async analyzeFile(args: { filePath: string }) {
    const { filePath } = args;

    try {
      const analysis = await this.analyzeFileInternal(filePath, 'deep');
      
      return {
        content: [
          {
            type: 'text',
            text: `üìÑ **–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${analysis.name}**\n\n- –¢–∏–ø: ${analysis.type}\n- –†–∞–∑–º–µ—Ä: ${(analysis.size / 1024).toFixed(1)} KB\n- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${analysis.linesOfCode}\n- –§—É–Ω–∫—Ü–∏–π: ${analysis.functions.length}\n- –ò–º–ø–æ—Ä—Ç–æ–≤: ${analysis.imports.length}\n- –≠–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.exports.length}`
          }
        ]
      };
    } catch (error) {
      throw new McpError(
        ErrorCode.InvalidRequest,
        `Cannot analyze file: ${error}`
      );
    }
  }

  private async analyzeFileInternal(
    filePath: string,
    depth: 'basic' | 'medium' | 'deep' = 'medium'
  ): Promise<FileAnalysis> {
    const stats = await fs.stat(filePath);
    const fileName = path.basename(filePath);
    const fileExt = path.extname(filePath).slice(1).toLowerCase();
    
    let content = '';
    let linesOfCode = 0;
    let functions: string[] = [];
    let imports: string[] = [];
    let exports: string[] = [];

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    const textExtensions = ['js', 'ts', 'jsx', 'tsx', 'py', 'html', 'css', 'json'];
    
    if (textExtensions.includes(fileExt)) {
      try {
        content = await fs.readFile(filePath, 'utf-8');
        linesOfCode = content.split('\n').length;

        if (depth !== 'basic') {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º JavaScript/TypeScript —Ñ–∞–π–ª—ã
          if (['js', 'ts', 'jsx', 'tsx'].includes(fileExt)) {
            functions = this.extractJSFunctions(content);
            imports = this.extractJSImports(content);
            exports = this.extractJSExports(content);
          }
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
          else if (fileExt === 'py') {
            functions = this.extractPythonFunctions(content);
            imports = this.extractPythonImports(content);
          }
        }
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}:`, error);
      }
    }

    return {
      path: filePath,
      name: fileName,
      type: fileExt || 'unknown',
      size: stats.size,
      linesOfCode,
      functions,
      imports,
      exports
    };
  }

  private extractJSFunctions(content: string): string[] {
    const functions: string[] = [];
    
    // –§—É–Ω–∫—Ü–∏–∏ function declaration
    const functionDeclarations = content.match(/function\s+(\w+)/g);
    if (functionDeclarations) {
      functions.push(...functionDeclarations.map(f => f.replace('function ', '')));
    }
    
    // Arrow functions
    const arrowFunctions = content.match(/const\s+(\w+)\s*=.*?=>/g);
    if (arrowFunctions) {
      functions.push(...arrowFunctions.map(f => f.match(/const\s+(\w+)/)?.[1] || '').filter(Boolean));
    }

    return [...new Set(functions)];
  }

  private extractJSImports(content: string): string[] {
    const imports: string[] = [];
    
    // ES6 imports
    const es6Imports = content.match(/import.*?from\s+['"`]([^'"`]+)['"`]/g);
    if (es6Imports) {
      imports.push(...es6Imports.map(imp => imp.match(/from\s+['"`]([^'"`]+)['"`]/)?.[1] || '').filter(Boolean));
    }

    return [...new Set(imports)];
  }

  private extractJSExports(content: string): string[] {
    const exports: string[] = [];
    
    // Named exports
    const namedExports = content.match(/export\s+(?:const|let|var|function|class)\s+(\w+)/g);
    if (namedExports) {
      exports.push(...namedExports.map(exp => exp.match(/(?:const|let|var|function|class)\s+(\w+)/)?.[1] || '').filter(Boolean));
    }

    return [...new Set(exports)];
  }

  private extractPythonFunctions(content: string): string[] {
    const functions: string[] = [];
    
    const pythonFunctions = content.match(/def\s+(\w+)/g);
    if (pythonFunctions) {
      functions.push(...pythonFunctions.map(f => f.replace('def ', '')));
    }

    return [...new Set(functions)];
  }

  private extractPythonImports(content: string): string[] {
    const imports: string[] = [];
    
    // from X import Y
    const fromImports = content.match(/from\s+(\S+)\s+import/g);
    if (fromImports) {
      imports.push(...fromImports.map(imp => imp.match(/from\s+(\S+)\s+import/)?.[1] || '').filter(Boolean));
    }

    return [...new Set(imports)];
  }

  private detectArchitecturePatterns(files: FileAnalysis[]): string[] {
    const patterns: string[] = [];
    const paths = files.map(f => f.path.toLowerCase());
    
    // Component-based architecture
    if (paths.some(p => p.includes('component'))) {
      patterns.push('Component Architecture');
    }
    
    // Service layer
    if (paths.some(p => p.includes('service')) || paths.some(p => p.includes('api'))) {
      patterns.push('Service Layer');
    }
    
    // Test coverage
    if (paths.some(p => p.includes('test') || p.includes('spec'))) {
      patterns.push('Test Coverage');
    }

    return patterns;
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    console.error('üöÄ MCP Code Analyzer Server –∑–∞–ø—É—â–µ–Ω!');
  }
}

const server = new CodeAnalyzerServer();
server.run().catch(console.error);
