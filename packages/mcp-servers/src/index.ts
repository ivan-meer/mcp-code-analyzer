#!/usr/bin/env node

/**
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è MCP Code Analyzer Server
 * –†–∞–∑–±–∏—Ç –Ω–∞ –º–æ–¥—É–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { 
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';

import { ProjectAnalyzer } from './analyzers/ProjectAnalyzer.js';
import { FileAnalyzer } from './analyzers/FileAnalyzer.js';
import { AnalysisConfig } from './types/analysis.types.js';

export class CodeAnalyzerServer {
  private server: Server;
  private projectAnalyzer: ProjectAnalyzer;
  private analysisCache = new Map<string, any>();

  constructor() {
    this.server = new Server({
      name: 'code-analyzer-server',
      version: '2.0.0',
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultConfig: AnalysisConfig = {
      includeTests: true,
      analysisDepth: 'medium',
      languages: ['js', 'ts', 'jsx', 'tsx', 'py', 'html', 'css', 'json'],
      ignorePatterns: [
        '**/node_modules/**',
        '**/dist/**',
        '**/build/**',
        '**/.git/**',
        '**/coverage/**'
      ],
      maxFileSize: 1024 * 1024 // 1MB
    };

    this.projectAnalyzer = new ProjectAnalyzer(defaultConfig);
    this.setupToolHandlers();
    this.setupErrorHandling();
  }

  private setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'analyze_project',
          description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é',
          inputSchema: {
            type: 'object',
            properties: {
              projectPath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞'
              },
              includeTests: {
                type: 'boolean',
                description: '–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∞–Ω–∞–ª–∏–∑',
                default: true
              },
              analysisDepth: {
                type: 'string',
                enum: ['basic', 'medium', 'deep'],
                description: '–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (basic - –±—ã—Å—Ç—Ä–æ, deep - –ø–æ–¥—Ä–æ–±–Ω–æ)',
                default: 'medium'
              },
              useCache: {
                type: 'boolean',
                description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                default: true
              }
            },
            required: ['projectPath']
          }
        },
        {
          name: 'analyze_file',
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
          inputSchema: {
            type: 'object',
            properties: {
              filePath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
              },
              analysisDepth: {
                type: 'string',
                enum: ['basic', 'medium', 'deep'],
                description: '–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞',
                default: 'medium'
              }
            },
            required: ['filePath']
          }
        },
        {
          name: 'get_quick_stats',
          description: '–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
          inputSchema: {
            type: 'object',
            properties: {
              projectPath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞'
              }
            },
            required: ['projectPath']
          }
        },
        {
          name: 'clear_cache',
          description: '–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∞–Ω–∞–ª–∏–∑–∞',
          inputSchema: {
            type: 'object',
            properties: {
              projectPath: {
                type: 'string',
                description: '–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
              }
            }
          }
        }
      ]
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request: any) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'analyze_project':
            return await this.handleAnalyzeProject(args);
          
          case 'analyze_file':
            return await this.handleAnalyzeFile(args);
          
          case 'get_quick_stats':
            return await this.handleGetQuickStats(args);
          
          case 'clear_cache':
            return await this.handleClearCache(args);
          
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Unknown tool: ${name}`
            );
        }
      } catch (error) {
        if (error instanceof McpError) {
          throw error;
        }
        console.error(`Error in ${name}:`, error);
        throw new McpError(
          ErrorCode.InternalError,
          `Error in ${name}: ${error instanceof Error ? error.message : String(error)}`
        );
      }
    });
  }

  private async handleAnalyzeProject(args: {
    projectPath: string;
    includeTests?: boolean;
    analysisDepth?: 'basic' | 'medium' | 'deep';
    useCache?: boolean;
  }) {
    const { projectPath, includeTests = true, analysisDepth = 'medium', useCache = true } = args;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `${projectPath}-${includeTests}-${analysisDepth}`;
    if (useCache && this.analysisCache.has(cacheKey)) {
      const cachedResult = this.analysisCache.get(cacheKey);
      return {
        content: [
          {
            type: 'text',
            text: 'üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞**\n\n–ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ä–∞–Ω–µ–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.'
          },
          {
            type: 'text',
            text: JSON.stringify(cachedResult, null, 2)
          }
        ]
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.projectAnalyzer.updateConfig({
      includeTests,
      analysisDepth
    });

    console.error(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}`);
    
    const startTime = Date.now();
    const analysis = await this.projectAnalyzer.analyzeProjectWithProgress(
      projectPath,
      (progress, currentFile) => {
        if (progress % 10 === 0 || progress === 100) {
          console.error(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.toFixed(0)}% ${currentFile ? `- ${currentFile}` : ''}`);
        }
      }
    );
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    if (useCache) {
      this.analysisCache.set(cacheKey, analysis);
    }

    const summary = this.formatProjectSummary(analysis, duration);

    return {
      content: [
        {
          type: 'text',
          text: summary
        },
        {
          type: 'text',
          text: JSON.stringify(analysis, null, 2)
        }
      ]
    };
  }

  private async handleAnalyzeFile(args: {
    filePath: string;
    analysisDepth?: 'basic' | 'medium' | 'deep';
  }) {
    const { filePath, analysisDepth = 'medium' } = args;

    const fileAnalyzer = new FileAnalyzer({
      includeTests: true,
      analysisDepth,
      languages: ['js', 'ts', 'jsx', 'tsx', 'py', 'html', 'css', 'json'],
      ignorePatterns: [],
      maxFileSize: 1024 * 1024
    });

    const analysis = await fileAnalyzer.analyzeFile(filePath);
    
    const summary = this.formatFileSummary(analysis);

    return {
      content: [
        {
          type: 'text',
          text: summary
        },
        {
          type: 'text',
          text: JSON.stringify(analysis, null, 2)
        }
      ]
    };
  }

  private async handleGetQuickStats(args: { projectPath: string }) {
    const { projectPath } = args;

    const stats = await this.projectAnalyzer.getQuickStats(projectPath);
    
    return {
      content: [
        {
          type: 'text',
          text: `üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞**\n\n` +
                `- üìÅ –§–∞–π–ª–æ–≤: ${stats.fileCount.toLocaleString()}\n` +
                `- üî§ –Ø–∑—ã–∫–∏: ${stats.languages.join(', ')}\n` +
                `- üíæ –†–∞–∑–º–µ—Ä: ${(stats.estimatedSize / 1024 / 1024).toFixed(1)} MB\n\n` +
                `–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ analyze_project.`
        }
      ]
    };
  }

  private async handleClearCache(args: { projectPath?: string }) {
    const { projectPath } = args;

    if (projectPath) {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const keysToDelete = Array.from(this.analysisCache.keys())
        .filter(key => key.startsWith(projectPath));
      
      keysToDelete.forEach(key => this.analysisCache.delete(key));
      
      return {
        content: [
          {
            type: 'text',
            text: `üóëÔ∏è –û—á–∏—â–µ–Ω –∫–µ—à –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${keysToDelete.length}`
          }
        ]
      };
    } else {
      // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à
      const count = this.analysisCache.size;
      this.analysisCache.clear();
      
      return {
        content: [
          {
            type: 'text',
            text: `üóëÔ∏è –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫–µ—à –∞–Ω–∞–ª–∏–∑–∞\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}`
          }
        ]
      };
    }
  }

  private formatProjectSummary(analysis: any, duration: string): string {
    const { metrics, files, todos, architecturePatterns } = analysis;
    
    return `üéâ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!** ‚è±Ô∏è ${duration}—Å\n\n` +
           `üìä **–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
           `- üìÅ –§–∞–π–ª–æ–≤: ${metrics.totalFiles.toLocaleString()}\n` +
           `- üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${metrics.totalLines.toLocaleString()}\n` +
           `- ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–π: ${metrics.totalFunctions.toLocaleString()}\n` +
           `- üî§ –Ø–∑—ã–∫–æ–≤: ${metrics.languages.join(', ')}\n` +
           `- üìä –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${metrics.avgComplexity}\n` +
           `- üß™ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${metrics.testCoverage}%\n\n` +
           `üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n${architecturePatterns.map((p: string) => `- ${p}`).join('\n')}\n\n` +
           `‚ö†Ô∏è **TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** ${todos.length}\n` +
           `${todos.length > 0 ? `- FIXME: ${todos.filter((t: any) => t.type === 'FIXME').length}\n` +
                                `- TODO: ${todos.filter((t: any) => t.type === 'TODO').length}\n` +
                                `- HACK: ${todos.filter((t: any) => t.type === 'HACK').length}\n` : ''}` +
           `\nüìà **–ì–æ—Ç–æ–≤–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!**`;
  }

  private formatFileSummary(analysis: any): string {
    return `üìÑ **–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${analysis.name}**\n\n` +
           `- üìä –¢–∏–ø: ${analysis.type}\n` +
           `- üíæ –†–∞–∑–º–µ—Ä: ${(analysis.size / 1024).toFixed(1)} KB\n` +
           `- üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${analysis.linesOfCode || 0}\n` +
           `- ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–π: ${analysis.functions.length}\n` +
           `- üì• –ò–º–ø–æ—Ä—Ç–æ–≤: ${analysis.imports.length}\n` +
           `- üì§ –≠–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.exports.length}\n` +
           `- ‚ö†Ô∏è TODO: ${analysis.todos?.length || 0}\n` +
           `- üîÑ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${analysis.complexity || 0}`;
  }

  private setupErrorHandling() {
    this.server.onerror = (error: Error) => {
      console.error('[MCP Error]', error);
    };

    process.on('SIGINT', async () => {
      console.error('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      await this.server.close();
      process.exit(0);
    });

    process.on('uncaughtException', (error) => {
      console.error('üí• Uncaught Exception:', error);
      process.exit(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
      process.exit(1);
    });
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    console.error('üöÄ MCP Code Analyzer Server v2.0 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.error('‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, batch –æ–±—Ä–∞–±–æ—Ç–∫–∞, —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new CodeAnalyzerServer();
server.run().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
});
