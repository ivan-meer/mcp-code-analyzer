"""
Anthropic Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
–†–µ–∞–ª–∏–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–π AI —Å–µ—Ä–≤–∏—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Anthropic API.
"""

import asyncio
import time
from typing import Dict, List, Optional, Any
import json
import httpx
from .base_ai_service import BaseAIService, CodeContext, AIResponse, AIServiceError, TokenLimitExceededError

class AnthropicService(BaseAIService):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Anthropic Claude –º–æ–¥–µ–ª—è–º–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Claude 3.5 Sonnet, Claude 3 Opus –∏ Claude 3 Haiku.
    """
    
    def __init__(self, api_key: str, model_name: str = "claude-3-5-sonnet-20241022"):
        super().__init__(api_key, model_name)
        self.base_url = "https://api.anthropic.com/v1"
        self.max_tokens_by_model = {
            "claude-3-5-sonnet-20241022": 200000,
            "claude-3-opus-20240229": 200000,
            "claude-3-haiku-20240307": 200000
        }
        
    async def explain_code(self, context: CodeContext, explanation_level: str = "intermediate") -> AIResponse:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude.
        
        Claude –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤.
        """
        start_time = time.time()
        
        try:
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            system_message = self._build_claude_system_prompt(explanation_level)
            user_message = self._format_context_for_claude(context)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Anthropic
            response = await self._make_api_request(system_message, user_message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç Claude
            ai_response = self._parse_claude_response(response)
            ai_response.processing_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.request_count += 1
            self.total_tokens_used += response.get("usage", {}).get("input_tokens", 0) + response.get("usage", {}).get("output_tokens", 0)
            
            return ai_response
            
        except Exception as e:
            raise AIServiceError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude: {str(e)}")
    
    async def suggest_improvements(self, context: CodeContext) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude.
        
        Claude –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.
        """
        try:
            system_message = """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –º–µ–Ω—Ç–æ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. 
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö:
            1. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
            2. –ß–ò–¢–ê–ï–ú–û–°–¢–¨: —É–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            3. –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–û–°–¢–¨: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            4. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            5. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
            - –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
            - –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞
            - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
            
            user_message = self._format_context_for_claude(context) + """

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. 
–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üîß –£–õ–£–ß–®–ï–ù–ò–ï: [–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]
‚ùå –ü–†–û–ë–õ–ï–ú–ê: [–ß—Ç–æ –Ω–µ —Ç–∞–∫ —Å–µ–π—á–∞—Å]
‚úÖ –†–ï–®–ï–ù–ò–ï: [–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å]
üí° –ü–†–ò–ú–ï–†: [–ö–æ–¥ –¥–æ/–ø–æ—Å–ª–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ]
üìà –†–ï–ó–£–õ–¨–¢–ê–¢: [–ö–∞–∫—É—é –ø–æ–ª—å–∑—É —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç]

---"""
            
            response = await self._make_api_request(system_message, user_message)
            improvements = self._extract_improvements_from_claude_response(response)
            
            self.request_count += 1
            self.total_tokens_used += response.get("usage", {}).get("input_tokens", 0) + response.get("usage", {}).get("output_tokens", 0)
            
            return improvements
            
        except Exception as e:
            raise AIServiceError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Claude: {str(e)}")
    
    async def detect_patterns(self, context: CodeContext) -> List[str]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ Claude.
        
        Claude –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç
        –≤—ã—è–≤–∏—Ç—å –∫–∞–∫ —è–≤–Ω—ã–µ, —Ç–∞–∫ –∏ –Ω–µ—è–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–¥–µ.
        """
        try:
            system_message = """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –≤—ã—è–≤–∏—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø–æ–¥—Ö–æ–¥—ã.
            
            –ò—â–∏—Ç–µ:
            1. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã GoF (Singleton, Factory, Observer, Strategy, etc.)
            2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (MVC, MVP, MVVM, Clean Architecture)
            3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (Higher-Order Functions, Monads, etc.)
            4. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (React Hooks, Decorators, etc.)
            5. –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (SOLID, DRY, KISS, YAGNI)
            
            –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
            
            user_message = self._format_context_for_claude(context) + """

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —É–∫–∞–∂–∏—Ç–µ:
üèóÔ∏è –ü–ê–¢–¢–ï–†–ù: [–ù–∞–∑–≤–∞–Ω–∏–µ]
üìç –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï: [–ì–¥–µ –≤ –∫–æ–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è]
‚≠ê –ö–ê–ß–ï–°–¢–í–û: [–û—Ç–ª–∏—á–Ω–æ/–•–æ—Ä–æ—à–æ/–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ/–ü–ª–æ—Ö–æ]
üìù –û–ü–ò–°–ê–ù–ò–ï: [–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω]
üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´: [–í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã]

---"""
            
            response = await self._make_api_request(system_message, user_message)
            patterns = self._extract_patterns_from_claude_response(response)
            
            self.request_count += 1
            self.total_tokens_used += response.get("usage", {}).get("input_tokens", 0) + response.get("usage", {}).get("output_tokens", 0)
            
            return patterns
            
        except Exception as e:
            raise AIServiceError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ Claude: {str(e)}")
    
    async def _make_api_request(self, system_message: str, user_message: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic API.
        """
        headers = {
            "x-api-key": self.api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (Claude –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å—á–µ—Ç–∞)
        # TODO: Research and integrate official Anthropic client-side token counting if available.
        # Current estimation is a heuristic (len // 3).
        estimated_tokens = (len(system_message) + len(user_message)) // 3
        max_tokens = self.max_tokens_by_model.get(self.model_name, 200000)
        
        if estimated_tokens > max_tokens * 0.8:
            raise TokenLimitExceededError(estimated_tokens, max_tokens)
        
        payload = {
            "model": self.model_name,
            "max_tokens": min(3000, max_tokens - estimated_tokens),
            "system": system_message,
            "messages": [
                {"role": "user", "content": user_message}
            ],
            "temperature": 0.3,
            "top_p": 0.9
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        for attempt in range(3):
            try:
                async with httpx.AsyncClient(timeout=90.0) as client:
                    response = await client.post(
                        f"{self.base_url}/messages",
                        headers=headers,
                        json=payload
                    )
                    
                    if response.status_code == 200:
                        return response.json()
                    elif response.status_code == 429:  # Rate limit
                        wait_time = 2 ** attempt
                        await asyncio.sleep(wait_time)
                        continue
                    else:
                        error_data = response.json() if response.content else {}
                        raise AIServiceError(
                            f"Anthropic API –æ—à–∏–±–∫–∞: {response.status_code} - {error_data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                        )
                        
            except httpx.TimeoutException:
                if attempt == 2:
                    raise AIServiceError("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Anthropic API")
                await asyncio.sleep(2 ** attempt)
            except httpx.RequestError as e:
                raise AIServiceError(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Anthropic API: {str(e)}")
        
        raise AIServiceError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Anthropic API –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def _build_claude_system_prompt(self, level: str) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–ª—è Claude.
        """
        base_prompt = """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π.
        –í–∞—à–∞ —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –ª–µ–≥–∫–æ –ø–æ–Ω–∏–º–∞–µ–º—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
        
        –í–∞—à –ø–æ–¥—Ö–æ–¥:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        2. –û–±—ä—è—Å–Ω—è–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ "—á—Ç–æ", –Ω–æ –∏ "–ø–æ—á–µ–º—É" –∏ "–∫–∞–∫"
        3. –°–≤—è–∑—ã–≤–∞–π—Ç–µ –∫–æ–¥ —Å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        4. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        5. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        - –ù–∞—á–Ω–∏—Ç–µ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥
        - –†–∞–∑–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        - –û–±—ä—è—Å–Ω–∏—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        - –£–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        
        level_prompts = {
            "beginner": """
            –ê–£–î–ò–¢–û–†–ò–Ø: –ù–∞—á–∏–Ω–∞—é—â–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
            - –û–±—ä—è—Å–Ω—è–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏
            - –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            - –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            - –ü–æ–æ—â—Ä—è–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏–∑—É—á–µ–Ω–∏–µ
            """,
            
            "intermediate": """
            –ê–£–î–ò–¢–û–†–ò–Ø: –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            - –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
            - –û–±—Å—É–∂–¥–∞–π—Ç–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            - –°–≤—è–∑—ã–≤–∞–π—Ç–µ —Å best practices –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
            - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–µ–Ω–∏—è
            - –†–∞—Å—à–∏—Ä—è–π—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
            """,
            
            "advanced": """
            –ê–£–î–ò–¢–û–†–ò–Ø: –û–ø—ã—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
            - –£–≥–ª—É–±–ª—è–π—Ç–µ—Å—å –≤ –Ω—é–∞–Ω—Å—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
            - –û–±—Å—É–∂–¥–∞–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã
            - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            - –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—Å—é —Å–∏—Å—Ç–µ–º—É
            """
        }
        
        return base_prompt + level_prompts.get(level, level_prompts["intermediate"])
    
    def _format_context_for_claude(self, context: CodeContext) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Claude —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
        """
        return f"""üìÅ –ê–ù–ê–õ–ò–ó –ö–û–î–ê

üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï:
‚Ä¢ –ü—É—Ç—å: {context.file_path}
‚Ä¢ –¢–∏–ø: {context.file_type}  
‚Ä¢ –†–∞–∑–º–µ—Ä: {context.lines_of_code} —Å—Ç—Ä–æ–∫

üèóÔ∏è –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(context.architecture_patterns) if context.architecture_patterns else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
‚Ä¢ –Ø–∑—ã–∫–∏: {', '.join(context.project_info.get('languages', [])) if context.project_info else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {context.project_info.get('total_files', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ñ–∞–π–ª–æ–≤, {context.project_info.get('total_lines', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Å—Ç—Ä–æ–∫

üîó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
{chr(10).join([f"‚Ä¢ {dep.get('to', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({dep.get('type', 'import')})" for dep in context.dependencies[:10]]) if context.dependencies else '‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}

‚öôÔ∏è –§–£–ù–ö–¶–ò–ò –í –§–ê–ô–õ–ï:
{chr(10).join([f"‚Ä¢ {func}" for func in context.functions[:15]]) if context.functions else '‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}

üì• –ò–ú–ü–û–†–¢–´:
{chr(10).join([f"‚Ä¢ {imp}" for imp in context.imports[:10]]) if context.imports else '‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}

üíª –ö–û–î –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
```{context.file_type}
{context.file_content}
```"""
    
    def _parse_claude_response(self, response: Dict[str, Any]) -> AIResponse:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude API.
        """
        try:
            content = response["content"][0]["text"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Claude
            concepts = self._extract_concepts_from_claude_text(content)
            recommendations = self._extract_recommendations_from_claude_text(content)
            examples = self._extract_examples_from_claude_text(content)
            
            return AIResponse(
                explanation=content,
                concepts=concepts,
                recommendations=recommendations,
                examples=examples,
                confidence_score=0.9,  # Claude –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –æ—á–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                processing_time=0.0
            )
            
        except (KeyError, IndexError) as e:
            raise AIServiceError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude: {str(e)}")
    
    def _extract_concepts_from_claude_text(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude.
        """
        concepts = []
        lines = text.split('\n')
        
        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ (–æ–±—ã—á–Ω–æ Claude –≤—ã–¥–µ–ª—è–µ—Ç –∏—Ö)
            if any(marker in line for marker in ['**', '‚Ä¢', '-', '*']) and any(keyword in line.lower() for keyword in ['–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–ø–∞—Ç—Ç–µ—Ä–Ω', '–ø—Ä–∏–Ω—Ü–∏–ø', '–ø–æ–¥—Ö–æ–¥']):
                cleaned = line.strip(' -*‚Ä¢').strip('*').strip()
                if cleaned and len(cleaned) < 100:
                    concepts.append(cleaned)
        
        return concepts[:8]
    
    def _extract_recommendations_from_claude_text(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude.
        """
        recommendations = []
        lines = text.split('\n')
        
        for line in lines:
            if any(keyword in line.lower() for keyword in ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å—Ç–æ–∏—Ç', '—Å–ª–µ–¥—É–µ—Ç', '–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å', '–ø—Ä–µ–¥–ª–∞–≥–∞—é']):
                cleaned = line.strip(' -*‚Ä¢').strip('*').strip()
                if cleaned and len(cleaned) < 150:
                    recommendations.append(cleaned)
        
        return recommendations[:5]
    
    def _extract_examples_from_claude_text(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude.
        """
        examples = []
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
        import re
        code_blocks = re.findall(r'```[\w]*\n(.*?)\n```', text, re.DOTALL)
        
        for block in code_blocks:
            if block.strip() and len(block) < 500:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤
                examples.append(block.strip())
        
        return examples[:3]
    
    def _extract_improvements_from_claude_response(self, response: Dict[str, Any]) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude.
        """
        try:
            content = response["content"][0]["text"]
            improvements = []
            
            # Claude —á–∞—Å—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∑–∏-–º–∞—Ä–∫–µ—Ä–∞–º–∏
            lines = content.split('\n')
            current_improvement = ""
            
            for line in lines:
                if line.strip().startswith('üîß') or line.strip().startswith('–£–õ–£–ß–®–ï–ù–ò–ï'):
                    if current_improvement:
                        improvements.append(current_improvement.strip())
                    current_improvement = line.strip()
                elif current_improvement and line.strip() and not line.startswith('---'):
                    current_improvement += " " + line.strip()
                elif line.startswith('---') and current_improvement:
                    improvements.append(current_improvement.strip())
                    current_improvement = ""
            
            if current_improvement:
                improvements.append(current_improvement.strip())
            
            return improvements[:10]
            
        except (KeyError, IndexError):
            return []
    
    def _extract_patterns_from_claude_response(self, response: Dict[str, Any]) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude.
        """
        try:
            content = response["content"][0]["text"]
            patterns = []
            
            lines = content.split('\n')
            current_pattern = ""
            
            for line in lines:
                if line.strip().startswith('üèóÔ∏è') or line.strip().startswith('–ü–ê–¢–¢–ï–†–ù'):
                    if current_pattern:
                        patterns.append(current_pattern.strip())
                    current_pattern = line.strip()
                elif current_pattern and line.strip() and not line.startswith('---'):
                    current_pattern += " " + line.strip()
                elif line.startswith('---') and current_pattern:
                    patterns.append(current_pattern.strip())
                    current_pattern = ""
            
            if current_pattern:
                patterns.append(current_pattern.strip())
            
            return patterns[:8]
            
        except (KeyError, IndexError):
            return []
