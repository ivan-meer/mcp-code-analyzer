#!/usr/bin/env python3
# üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –§–∞–π–ª: patches/apply_monitoring_patch.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.
"""

import os
import shutil
import sys
from pathlib import Path
from datetime import datetime
import re

class MonitoringPatchApplier:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, project_root: str = None):
        if project_root:
            self.project_root = Path(project_root)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            current_dir = Path(__file__).parent
            self.project_root = current_dir.parent
        
        self.main_py_path = self.project_root / "main.py"
        self.backup_dir = self.project_root / "backups"
        
        print(f"üéØ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        print(f"üìÑ –§–∞–π–ª main.py: {self.main_py_path}")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ main.py"""
        if not self.main_py_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {self.main_py_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        self.backup_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.backup_dir / f"main_py_backup_{timestamp}.py"
        
        shutil.copy2(self.main_py_path, backup_path)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return backup_path
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            "infrastructure/monitoring/__init__.py",
            "infrastructure/monitoring/core.py", 
            "infrastructure/monitoring/migration_adapter.py",
            "config/monitoring.py"
        ]
        
        missing_files = []
        for file_path in required_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                missing_files.append(file_path)
        
        if missing_files:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
            for file in missing_files:
                print(f"   - {file}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    def read_main_py(self):
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ main.py"""
        with open(self.main_py_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def write_main_py(self, content: str):
        """–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ main.py"""
        with open(self.main_py_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def add_monitoring_imports(self, content: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ FastAPI)
        import_pattern = r"(from fastapi import.*?\n)"
        
        new_imports = """
# üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
import os
from datetime import datetime, timezone

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from infrastructure.monitoring.migration_adapter import (
        get_monitoring_system,
        HybridMonitoringSystem,
        EventType as NewEventType,
        LogLevel
    )
    from config.monitoring import get_hybrid_monitoring_config, ensure_log_directory
    OPTIMIZED_MONITORING_AVAILABLE = True
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
except ImportError as e:
    OPTIMIZED_MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

"""
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        content = re.sub(import_pattern, r"\1" + new_imports, content, count=1)
        
        return content
    
    def replace_monitoring_initialization(self, content: str) -> str:
        """–ó–∞–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        old_import_pattern = r"from monitoring_system import \((.*?)\)"
        content = re.sub(old_import_pattern, r"# from monitoring_system import (\1)", content, flags=re.DOTALL)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ai_manager
        ai_manager_pattern = r"(ai_manager = None)"
        
        monitoring_init = r"""\1

# =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
if OPTIMIZED_MONITORING_AVAILABLE:
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    ensure_log_directory()
    monitoring_config = get_hybrid_monitoring_config()
    optimized_monitoring = get_monitoring_system()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    USE_OPTIMIZED_MONITORING = monitoring_config.get('use_new_system', True)
    COMPARE_MONITORING_SYSTEMS = monitoring_config.get('compare_systems', False)
    
    print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:")
    print(f"   ‚îî‚îÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {USE_OPTIMIZED_MONITORING}")
    print(f"   ‚îî‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º: {COMPARE_MONITORING_SYSTEMS}")
else:
    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    optimized_monitoring = None
    USE_OPTIMIZED_MONITORING = False
    COMPARE_MONITORING_SYSTEMS = False
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

# ==============================================================================="""
        
        content = re.sub(ai_manager_pattern, monitoring_init, content)
        
        return content
    
    def update_analyze_endpoint(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ endpoint –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é analyze_project
        analyze_pattern = r"(@app\.post\(\"/api/analyze\".*?async def analyze_project\(.*?\):.*?)(session_id = str\(uuid\.uuid4\(\)\))"
        
        replacement = r"""\1session_id = str(uuid.uuid4())
    
    # üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if USE_OPTIMIZED_MONITORING and optimized_monitoring:
        monitoring_system = optimized_monitoring
        event_type = NewEventType.ANALYSIS_START
    else:
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        from monitoring_system import analytics_logger, EventType
        monitoring_system = analytics_logger
        event_type = EventType.ANALYSIS_START"""
        
        content = re.sub(analyze_pattern, replacement, content, flags=re.DOTALL)
        
        return content
    
    def update_track_operation_calls(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ track_operation –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã analytics_logger.track_operation
        track_operation_pattern = r"analytics_logger\.track_operation\("
        replacement = "monitoring_system.track_operation("
        
        content = re.sub(track_operation_pattern, replacement, content)
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã track_analysis_operation
        track_analysis_pattern = r"track_analysis_operation\("
        content = re.sub(track_analysis_pattern, replacement, content)
        
        return content
    
    def update_health_endpoints(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ health check endpoints"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º health check —Ñ—É–Ω–∫—Ü–∏—é
        health_pattern = r"(async def health_check\(\):.*?)(health_data = get_system_health\(\))"
        
        replacement = r"""\1# üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if USE_OPTIMIZED_MONITORING and optimized_monitoring:
        health_data = optimized_monitoring.health_check()
    else:
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        health_data = get_system_health()"""
        
        content = re.sub(health_pattern, replacement, content, flags=re.DOTALL)
        
        return content
    
    def apply_patch(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ç—á–∞"""
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = self.create_backup()
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π main.py
            content = self.read_main_py()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
            content = self.add_monitoring_imports(content)
            
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            content = self.replace_monitoring_initialization(content)
            
            print("üéØ –û–±–Ω–æ–≤–ª—è–µ–º endpoint –∞–Ω–∞–ª–∏–∑–∞...")
            content = self.update_analyze_endpoint(content)
            
            print("üîó –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã track_operation...")
            content = self.update_track_operation_calls(content)
            
            print("ü©∫ –û–±–Ω–æ–≤–ª—è–µ–º health endpoints...")
            content = self.update_health_endpoints(content)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            self.write_main_py(content)
            
            print(f"‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            shutil.copy2(backup_path, self.main_py_path)
            print("‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            
            return False
    
    def validate_patch(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞"""
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞...")
        
        content = self.read_main_py()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = [
            ("–ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "OPTIMIZED_MONITORING_AVAILABLE"),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", "optimized_monitoring = get_monitoring_system()"),
            ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã", "USE_OPTIMIZED_MONITORING"),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã", "monitoring_system.track_operation(")
        ]
        
        passed_checks = 0
        for check_name, check_pattern in checks:
            if check_pattern in content:
                print(f"   ‚úÖ {check_name}")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}")
        
        success_rate = (passed_checks / len(checks)) * 100
        print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {success_rate:.1f}%")
        
        return passed_checks == len(checks)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if len(sys.argv) > 1:
        project_root = sys.argv[1]
    else:
        project_root = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        patcher = MonitoringPatchApplier(project_root)
        
        if patcher.apply_patch():
            if patcher.validate_patch():
                print("\nüéâ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω!")
                print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
                print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python tests/test_monitoring_optimization.py")
                print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/")
                print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
            else:
                print("\n‚ö†Ô∏è –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
