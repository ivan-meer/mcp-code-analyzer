# üîÑ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –§–∞–π–ª: infrastructure/monitoring/migration_adapter.py

"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫ –Ω–æ–≤–æ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
1. –û–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
2. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö —Å–∏—Å—Ç–µ–º
4. Feature flags –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
"""

import os
import asyncio
import logging
from typing import Optional, Dict, Any, Union
from contextlib import asynccontextmanager
from datetime import datetime, timezone

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
try:
    from monitoring_system import (
        analytics_logger as old_logger,
        EventType as OldEventType,
        AnalysisEvent as OldAnalysisEvent,
        track_analysis_operation,
        log_analysis_event,
        get_system_health,
        get_analytics_summary
    )
    OLD_SYSTEM_AVAILABLE = True
except ImportError:
    OLD_SYSTEM_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
from .core import (
    OptimizedMonitoringSystem,
    MonitoringConfig,
    EventType,
    LogLevel,
    MonitoringEvent,
    create_monitoring_system
)

class EventTypeMapper:
    """–ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    @staticmethod
    def old_to_new(old_event_type) -> EventType:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ –Ω–æ–≤—ã–µ"""
        if not OLD_SYSTEM_AVAILABLE:
            return EventType.ANALYSIS_START
        
        mapping = {
            OldEventType.ANALYSIS_START: EventType.ANALYSIS_START,
            OldEventType.ANALYSIS_COMPLETE: EventType.ANALYSIS_COMPLETE,
            OldEventType.ANALYSIS_ERROR: EventType.ANALYSIS_ERROR,
            OldEventType.FILE_SCAN_START: EventType.FILE_SCAN_START,
            OldEventType.FILE_SCAN_COMPLETE: EventType.FILE_SCAN_COMPLETE,
            OldEventType.FILE_ANALYSIS_START: EventType.FILE_ANALYSIS_START,
            OldEventType.FILE_ANALYSIS_COMPLETE: EventType.FILE_ANALYSIS_COMPLETE,
            OldEventType.AI_REQUEST_START: EventType.AI_REQUEST_START,
            OldEventType.AI_REQUEST_COMPLETE: EventType.AI_REQUEST_COMPLETE,
            OldEventType.AI_REQUEST_ERROR: EventType.AI_REQUEST_ERROR,
            OldEventType.SYSTEM_HEALTH_CHECK: EventType.HEALTH_CHECK,
            OldEventType.PERFORMANCE_METRIC: EventType.PERFORMANCE_SAMPLE,
        }
        
        return mapping.get(old_event_type, EventType.ANALYSIS_START)
    
    @staticmethod
    def new_to_old(new_event_type: EventType):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ —Å—Ç–∞—Ä—ã–µ"""
        if not OLD_SYSTEM_AVAILABLE:
            return None
        
        reverse_mapping = {
            EventType.ANALYSIS_START: OldEventType.ANALYSIS_START,
            EventType.ANALYSIS_COMPLETE: OldEventType.ANALYSIS_COMPLETE,
            EventType.ANALYSIS_ERROR: OldEventType.ANALYSIS_ERROR,
            EventType.FILE_SCAN_START: OldEventType.FILE_SCAN_START,
            EventType.FILE_SCAN_COMPLETE: OldEventType.FILE_SCAN_COMPLETE,
            EventType.FILE_ANALYSIS_START: OldEventType.FILE_ANALYSIS_START,
            EventType.FILE_ANALYSIS_COMPLETE: OldEventType.FILE_ANALYSIS_COMPLETE,
            EventType.AI_REQUEST_START: OldEventType.AI_REQUEST_START,
            EventType.AI_REQUEST_COMPLETE: OldEventType.AI_REQUEST_COMPLETE,
            EventType.AI_REQUEST_ERROR: OldEventType.AI_REQUEST_ERROR,
            EventType.HEALTH_CHECK: OldEventType.SYSTEM_HEALTH_CHECK,
            EventType.PERFORMANCE_SAMPLE: OldEventType.PERFORMANCE_METRIC,
        }
        
        return reverse_mapping.get(new_event_type)

class HybridMonitoringSystem:
    """
    –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    - –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    - –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    """
    
    def __init__(self, 
                 use_new_system: bool = True,
                 use_old_system: bool = True,
                 compare_systems: bool = False,
                 environment: str = "development"):
        
        self.use_new_system = use_new_system
        self.use_old_system = use_old_system and OLD_SYSTEM_AVAILABLE
        self.compare_systems = compare_systems
        self.logger = logging.getLogger("hybrid_monitoring")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.new_system: Optional[OptimizedMonitoringSystem] = None
        if self.use_new_system:
            self.new_system = create_monitoring_system(environment)
            self.logger.info("‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.comparison_stats = {
            'events_logged_new': 0,
            'events_logged_old': 0,
            'errors_new': 0,
            'errors_old': 0,
            'performance_new': [],
            'performance_old': []
        }
    
    async def log_event(self, 
                       event_type: Union[EventType, 'OldEventType'],
                       level: LogLevel = LogLevel.STANDARD,
                       **kwargs):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if self.use_new_system and self.new_system:
            try:
                start_time = asyncio.get_event_loop().time()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if OLD_SYSTEM_AVAILABLE and hasattr(event_type, 'value'):
                    new_event_type = EventTypeMapper.old_to_new(event_type)
                else:
                    new_event_type = event_type
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                event = MonitoringEvent(
                    event_id=self.new_system.generate_event_id(),
                    event_type=new_event_type,
                    timestamp=datetime.now(timezone.utc),
                    level=level,
                    **kwargs
                )
                
                await self.new_system.log_event(event)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if self.compare_systems:
                    duration = asyncio.get_event_loop().time() - start_time
                    self.comparison_stats['performance_new'].append(duration)
                    self.comparison_stats['events_logged_new'] += 1
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                if self.compare_systems:
                    self.comparison_stats['errors_new'] += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        if self.use_old_system and OLD_SYSTEM_AVAILABLE:
            try:
                start_time = asyncio.get_event_loop().time()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if isinstance(event_type, EventType):
                    old_event_type = EventTypeMapper.new_to_old(event_type)
                    if old_event_type is None:
                        return  # –°–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                else:
                    old_event_type = event_type
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                log_analysis_event(old_event_type, **kwargs)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if self.compare_systems:
                    duration = asyncio.get_event_loop().time() - start_time
                    self.comparison_stats['performance_old'].append(duration)
                    self.comparison_stats['events_logged_old'] += 1
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                if self.compare_systems:
                    self.comparison_stats['errors_old'] += 1
    
    @asynccontextmanager
    async def track_operation(self, 
                            operation_type: Union[EventType, 'OldEventType'],
                            level: LogLevel = LogLevel.STANDARD,
                            **kwargs):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"""
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
        new_context = None
        old_context = None
        
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        if self.use_new_system and self.new_system:
            if isinstance(operation_type, EventType):
                new_event_type = operation_type
            else:
                new_event_type = EventTypeMapper.old_to_new(operation_type)
            
            new_context = self.new_system.track_operation(
                new_event_type, level=level, **kwargs
            )
        
        # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
        if self.use_old_system and OLD_SYSTEM_AVAILABLE:
            if isinstance(operation_type, EventType):
                old_event_type = EventTypeMapper.new_to_old(operation_type)
            else:
                old_event_type = operation_type
            
            if old_event_type:
                old_context = track_analysis_operation(old_event_type, **kwargs)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ–±–µ–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
        try:
            contexts = []
            if new_context:
                contexts.append(new_context.__aenter__())
            if old_context:
                contexts.append(old_context.__aenter__())
            
            if contexts:
                results = await asyncio.gather(*contexts, return_exceptions=True)
                yield results[0] if results else None
            else:
                yield None
                
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            cleanup_tasks = []
            if new_context:
                cleanup_tasks.append(new_context.__aexit__(None, None, None))
            if old_context:
                cleanup_tasks.append(old_context.__aexit__(None, None, None))
            
            if cleanup_tasks:
                await asyncio.gather(*cleanup_tasks, return_exceptions=True)
    
    def get_analytics_summary(self, session_id: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º"""
        summary = {
            'new_system': None,
            'old_system': None,
            'comparison': None
        }
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        if self.use_new_system and self.new_system:
            try:
                summary['new_system'] = self.new_system.get_analytics_summary(session_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        if self.use_old_system and OLD_SYSTEM_AVAILABLE:
            try:
                summary['old_system'] = get_analytics_summary(session_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if self.compare_systems:
            summary['comparison'] = self._generate_comparison_report()
        
        return summary
    
    def _generate_comparison_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º"""
        stats = self.comparison_stats
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_perf_new = (sum(stats['performance_new']) / len(stats['performance_new']) 
                       if stats['performance_new'] else 0)
        avg_perf_old = (sum(stats['performance_old']) / len(stats['performance_old']) 
                       if stats['performance_old'] else 0)
        
        return {
            'events_comparison': {
                'new_system': stats['events_logged_new'],
                'old_system': stats['events_logged_old']
            },
            'error_rates': {
                'new_system': (stats['errors_new'] / max(stats['events_logged_new'], 1)) * 100,
                'old_system': (stats['errors_old'] / max(stats['events_logged_old'], 1)) * 100
            },
            'average_performance_ms': {
                'new_system': avg_perf_new * 1000,
                'old_system': avg_perf_old * 1000
            },
            'performance_improvement': {
                'percentage': ((avg_perf_old - avg_perf_new) / max(avg_perf_old, 0.001)) * 100,
                'faster_system': 'new' if avg_perf_new < avg_perf_old else 'old'
            }
        }
    
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º"""
        health = {
            'new_system': None,
            'old_system': None,
            'overall_status': 'unknown'
        }
        
        statuses = []
        
        # –ó–¥–æ—Ä–æ–≤—å–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        if self.use_new_system and self.new_system:
            try:
                health['new_system'] = {
                    'status': 'healthy',
                    'events_in_buffer': len(self.new_system._events_buffer),
                    'metrics_collection_active': (
                        self.new_system._metrics_task is not None and 
                        not self.new_system._metrics_task.done()
                    )
                }
                statuses.append('healthy')
            except Exception as e:
                health['new_system'] = {'status': 'error', 'error': str(e)}
                statuses.append('error')
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        if self.use_old_system and OLD_SYSTEM_AVAILABLE:
            try:
                health['old_system'] = get_system_health()
                statuses.append(health['old_system'].get('status', 'unknown'))
            except Exception as e:
                health['old_system'] = {'status': 'error', 'error': str(e)}
                statuses.append('error')
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if 'error' in statuses:
            health['overall_status'] = 'error'
        elif 'warning' in statuses:
            health['overall_status'] = 'warning'
        elif 'healthy' in statuses:
            health['overall_status'] = 'healthy'
        
        return health
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º"""
        self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if self.use_new_system and self.new_system:
            await self.new_system.shutdown()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if self.compare_systems:
            final_report = self._generate_comparison_report()
            self.logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º: {final_report}")
        
        self.logger.info("–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
class MonitoringConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    @staticmethod
    def get_monitoring_config() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return {
            'use_new_system': os.getenv('MONITORING_USE_NEW', 'true').lower() == 'true',
            'use_old_system': os.getenv('MONITORING_USE_OLD', 'true').lower() == 'true',
            'compare_systems': os.getenv('MONITORING_COMPARE', 'false').lower() == 'true',
            'environment': os.getenv('MONITORING_ENV', 'development'),
            'log_level': os.getenv('MONITORING_LOG_LEVEL', 'standard'),
        }
    
    @staticmethod
    def create_monitoring_system() -> HybridMonitoringSystem:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = MonitoringConfigManager.get_monitoring_config()
        return HybridMonitoringSystem(**config)

# üîÑ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class CompatibilityAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    
    def __init__(self, hybrid_system: HybridMonitoringSystem):
        self.hybrid_system = hybrid_system
    
    # –≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ API
    async def track_operation(self, event_type, **kwargs):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å track_analysis_operation"""
        return self.hybrid_system.track_operation(event_type, **kwargs)
    
    async def log_event(self, event_type, **kwargs):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å log_analysis_event"""
        return await self.hybrid_system.log_event(event_type, **kwargs)
    
    def get_system_health(self):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å get_system_health"""
        health = self.hybrid_system.health_check()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        return health.get('old_system', health.get('new_system', {'status': 'unknown'}))
    
    def get_analytics_summary(self, session_id=None):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å get_analytics_summary"""
        summary = self.hybrid_system.get_analytics_summary(session_id)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        return summary.get('old_system', summary.get('new_system', {}))

# üåü –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_monitoring_system = None

def get_monitoring_system() -> HybridMonitoringSystem:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global _global_monitoring_system
    if _global_monitoring_system is None:
        _global_monitoring_system = MonitoringConfigManager.create_monitoring_system()
    return _global_monitoring_system

# üîÑ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (drop-in replacement)
async def track_analysis_operation(event_type, **kwargs):
    """Drop-in replacement –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    system = get_monitoring_system()
    return system.track_operation(event_type, **kwargs)

async def log_analysis_event(event_type, **kwargs):
    """Drop-in replacement –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    system = get_monitoring_system()
    await system.log_event(event_type, **kwargs)

def get_system_health():
    """Drop-in replacement –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    system = get_monitoring_system()
    adapter = CompatibilityAdapter(system)
    return adapter.get_system_health()

def get_analytics_summary(session_id=None):
    """Drop-in replacement –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    system = get_monitoring_system()
    adapter = CompatibilityAdapter(system)
    return adapter.get_analytics_summary(session_id)
