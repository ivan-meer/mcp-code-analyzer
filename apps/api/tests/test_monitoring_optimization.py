#!/usr/bin/env python3
# üß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –§–∞–π–ª: tests/test_monitoring_optimization.py

"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import time
import os
import sys
from pathlib import Path
import statistics
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from infrastructure.monitoring.core import (
    OptimizedMonitoringSystem, 
    MonitoringConfig, 
    EventType, 
    LogLevel,
    MonitoringEvent
)
from infrastructure.monitoring.migration_adapter import HybridMonitoringSystem
from config.monitoring import get_monitoring_config, ensure_log_directory

class MonitoringPerformanceTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.results = {}
        ensure_log_directory()
    
    def _get_memory_usage(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ MB"""
        process = psutil.Process()
        return process.memory_info().rss / (1024 * 1024)
    
    async def test_new_system_performance(self, event_count: int = 1000):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ({event_count} —Å–æ–±—ã—Ç–∏–π)...")
        
        config = get_monitoring_config()
        config.enable_console_output = False  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        monitoring = OptimizedMonitoringSystem(config)
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        memory_start = self._get_memory_usage()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        tasks = []
        for i in range(event_count):
            event = MonitoringEvent(
                event_id=monitoring.generate_event_id(),
                event_type=EventType.PERFORMANCE_SAMPLE,
                timestamp=time.time(),
                metadata={'test_event': i, 'batch': i // 100}
            )
            tasks.append(monitoring.log_event(event))
        
        await asyncio.gather(*tasks)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
        await monitoring._flush_events_batch()
        
        end_time = time.time()
        memory_end = self._get_memory_usage()
        
        await monitoring.shutdown()
        
        return {
            'system': 'new',
            'events': event_count,
            'duration': end_time - start_time,
            'events_per_second': event_count / (end_time - start_time),
            'memory_used_mb': memory_end - memory_start,
            'avg_event_time_ms': ((end_time - start_time) / event_count) * 1000
        }
    
    async def test_hybrid_system_performance(self, event_count: int = 1000):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ({event_count} —Å–æ–±—ã—Ç–∏–π)...")
        
        # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
        monitoring = HybridMonitoringSystem(
            use_new_system=True,
            use_old_system=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            compare_systems=True,
            environment="testing"
        )
        
        start_time = time.time()
        memory_start = self._get_memory_usage()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        for i in range(event_count):
            await monitoring.log_event(
                EventType.FILE_ANALYSIS_COMPLETE,
                file_path=f"/test/file_{i}.py",
                duration_ms=50.0 + (i % 10),
                metadata={'test_iteration': i}
            )
        
        end_time = time.time()
        memory_end = self._get_memory_usage()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        analytics = monitoring.get_analytics_summary()
        
        await monitoring.shutdown()
        
        return {
            'system': 'hybrid',
            'events': event_count,
            'duration': end_time - start_time,
            'events_per_second': event_count / (end_time - start_time),
            'memory_used_mb': memory_end - memory_start,
            'avg_event_time_ms': ((end_time - start_time) / event_count) * 1000,
            'analytics': analytics
        }
    
    async def run_stress_test(self, concurrent_operations: int = 10, events_per_operation: int = 100):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
        print(f"üí™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: {concurrent_operations} –æ–ø–µ—Ä–∞—Ü–∏–π x {events_per_operation} —Å–æ–±—ã—Ç–∏–π...")
        
        monitoring = HybridMonitoringSystem(
            use_new_system=True,
            use_old_system=False,
            environment="testing"
        )
        
        start_time = time.time()
        memory_start = self._get_memory_usage()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        async def simulate_analysis_operation(operation_id: int):
            async with monitoring.track_operation(
                EventType.ANALYSIS_START,
                project_path=f"/test/project_{operation_id}",
                session_id=f"stress_test_{operation_id}"
            ):
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
                for i in range(events_per_operation):
                    await monitoring.log_event(
                        EventType.FILE_ANALYSIS_COMPLETE,
                        file_path=f"/test/project_{operation_id}/file_{i}.py",
                        duration_ms=25.0 + (i % 5),
                        level=LogLevel.DETAILED
                    )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    await asyncio.sleep(0.001)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [simulate_analysis_operation(i) for i in range(concurrent_operations)]
        await asyncio.gather(*tasks)
        
        end_time = time.time()
        memory_end = self._get_memory_usage()
        
        total_events = concurrent_operations * events_per_operation
        analytics = monitoring.get_analytics_summary()
        
        await monitoring.shutdown()
        
        return {
            'system': 'stress_test',
            'concurrent_operations': concurrent_operations,
            'events_per_operation': events_per_operation,
            'total_events': total_events,
            'duration': end_time - start_time,
            'events_per_second': total_events / (end_time - start_time),
            'memory_used_mb': memory_end - memory_start,
            'avg_event_time_ms': ((end_time - start_time) / total_events) * 1000,
            'analytics': analytics
        }
    
    def print_results(self, results: dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ '{results['system']}':")
        print(f"   ‚îú‚îÄ –°–æ–±—ã—Ç–∏—è: {results['events']:,}")
        print(f"   ‚îú‚îÄ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['duration']:.3f}s")
        print(f"   ‚îú‚îÄ –°–æ–±—ã—Ç–∏—è/—Å–µ–∫: {results['events_per_second']:.1f}")
        print(f"   ‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {results['avg_event_time_ms']:.3f}ms")
        print(f"   ‚îî‚îÄ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {results['memory_used_mb']:.2f}MB")
        
        if 'analytics' in results:
            analytics = results['analytics']
            if analytics.get('new_system'):
                new_sys = analytics['new_system']
                print(f"   üìà –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π: {new_sys.get('events_in_buffer', 0)}")
                print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤ –±—É—Ñ–µ—Ä–µ: {new_sys.get('metrics_in_buffer', 0)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    tester = MonitoringPerformanceTest()
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        result1 = await tester.test_new_system_performance(1000)
        tester.print_results(result1)
        
        print("\n" + "-" * 40)
        
        # –¢–µ—Å—Ç 2: –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        result2 = await tester.test_hybrid_system_performance(1000)
        tester.print_results(result2)
        
        print("\n" + "-" * 40)
        
        # –¢–µ—Å—Ç 3: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
        result3 = await tester.run_stress_test(5, 200)
        tester.print_results(result3)
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüéØ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
        print(f"   ‚îú‚îÄ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {result1['events_per_second']:.1f} —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫")
        print(f"   ‚îú‚îÄ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {result2['events_per_second']:.1f} —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫")
        print(f"   ‚îî‚îÄ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: {result3['events_per_second']:.1f} —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫")
        
        performance_improvement = ((result1['events_per_second'] - result2['events_per_second']) / result2['events_per_second']) * 100
        print(f"\n‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_improvement:+.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
