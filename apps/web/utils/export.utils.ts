/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 * 
 * –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 * –≤ —É–¥–æ–±–Ω—ã—Ö –¥–ª—è –Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π
 * —Ñ–∞–π–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–¥–µ—Å—å:
 * 1. –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * 2. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è - —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ—è—Ç—Å—è –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö
 * 3. –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –≤—Å–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã —á–µ—Ç–∫–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
 */

import { ProjectAnalysis, ProjectFile, ProjectTodo, DocFile, ExportOptions } from '@/types/analysis.types';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
 * 
 * –≠—Ç–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
 * –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –û–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ "–º–æ—Å—Ç" –º–µ–∂–¥—É
 * –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * 
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @param filename - –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param mimeType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—Ä–∞—É–∑–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª)
 */
const downloadFile = (content: string, filename: string, mimeType: string): void => {
  // –°–æ–∑–¥–∞–µ–º Blob - —ç—Ç–æ —Å–ø–æ—Å–æ–± –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ñ–∞–π–ª
  const blob = new Blob([content], { type: mimeType });
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const link = document.createElement('a');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä –∞—Ç—Ä–∏–±—É—Ç download
  if (link.download !== undefined) {
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º URL.createObjectURL
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, —É–¥–∞–ª—è—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
    URL.revokeObjectURL(url);
  } else {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const encodedContent = encodeURIComponent(content);
    window.open(`data:${mimeType};charset=utf-8,${encodedContent}`);
  }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
 * 
 * JSON —É–¥–æ–±–µ–Ω –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–º–µ–Ω–∞
 * —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º pretty-printing –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
 * 
 * @param data - –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns —Å—Ç—Ä–æ–∫–∞ —Å JSON –¥–∞–Ω–Ω—ã–º–∏
 */
export const exportToJson = (data: ProjectAnalysis, options: ExportOptions): string => {
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
  const exportData: Partial<ProjectAnalysis> = {
    project_path: data.project_path,
    files: data.files, // –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ–≥–¥–∞ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
  };

  // –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (options.includeMetrics) {
    exportData.metrics = data.metrics;
    exportData.architecture_patterns = data.architecture_patterns;
  }

  if (options.includeDependencies && data.dependencies) {
    exportData.dependencies = data.dependencies;
  }

  if (options.includeTodos && data.all_todos) {
    exportData.all_todos = data.all_todos;
  }

  if (options.includeDocumentation && data.project_documentation) {
    exportData.project_documentation = data.project_documentation;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  return JSON.stringify(exportData, null, 2);
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
 * 
 * CSV —É–¥–æ–±–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Excel –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
 * –ú—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ.
 * 
 * @param data - –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns —Å—Ç—Ä–æ–∫–∞ —Å CSV –¥–∞–Ω–Ω—ã–º–∏
 */
export const exportToCsv = (data: ProjectAnalysis, options: ExportOptions): string => {
  const csvRows: string[] = [];
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV —Ñ–∞–π–ª–∞
  const headers = ['File Path', 'File Name', 'Type', 'Size (bytes)', 'Lines of Code', 'Functions Count'];
  csvRows.push(headers.join(','));

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ —Å—Ç—Ä–æ–∫—É CSV
  data.files.forEach(file => {
    const row = [
      `"${file.path}"`,                           // –ö–∞–≤—ã—á–∫–∏ –∑–∞—â–∏—â–∞—é—Ç –æ—Ç –∑–∞–ø—è—Ç—ã—Ö –≤ –ø—É—Ç—è—Ö
      `"${file.name}"`,
      file.type,
      file.size.toString(),
      (file.lines_of_code || 0).toString(),
      file.functions.length.toString()
    ];
    csvRows.push(row.join(','));
  });

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–∫–ª—é—á–∏—Ç—å TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
  if (options.includeTodos && data.all_todos && data.all_todos.length > 0) {
    csvRows.push(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
    csvRows.push('TODO/FIXME Comments:');
    csvRows.push('File Path,Line,Type,Content');
    
    data.all_todos.forEach(todo => {
      const row = [
        `"${todo.file_path}"`,
        todo.line.toString(),
        todo.type,
        `"${todo.content.replace(/"/g, '""')}"` // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
      ];
      csvRows.push(row.join(','));
    });
  }

  return csvRows.join('\n');
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
 * 
 * Markdown –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤.
 * –û–Ω —á–∏—Ç–∞–µ–º –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ, —Ç–∞–∫ –∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ.
 * 
 * @param data - –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns —Å—Ç—Ä–æ–∫–∞ —Å Markdown –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
 */
export const exportToMarkdown = (data: ProjectAnalysis, options: ExportOptions): string => {
  let markdown = '';
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const projectName = data.project_path.split('/').pop() || 'Unknown Project';
  markdown += `# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${projectName}\n\n`;
  markdown += `**–ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** \`${data.project_path}\`\n\n`;
  markdown += `**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date().toLocaleDateString('ru-RU')}\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –∑–∞–ø—Ä–æ—Å–∏–ª
  if (options.includeMetrics) {
    markdown += '## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n';
    markdown += `- **–§–∞–π–ª–æ–≤:** ${data.metrics.total_files}\n`;
    markdown += `- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${data.metrics.total_lines.toLocaleString('ru-RU')}\n`;
    markdown += `- **–§—É–Ω–∫—Ü–∏–π:** ${data.metrics.total_functions}\n`;
    markdown += `- **–°—Ä–µ–¥–Ω–µ–µ —Å—Ç—Ä–æ–∫ –Ω–∞ —Ñ–∞–π–ª:** ${Math.round(data.metrics.avg_lines_per_file)}\n`;
    markdown += `- **–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:** ${data.metrics.languages.join(', ')}\n\n`;

    if (data.architecture_patterns.length > 0) {
      markdown += `- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:** ${data.architecture_patterns.join(', ')}\n\n`;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
  markdown += '## üìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞\n\n';
  markdown += '| –§–∞–π–ª | –¢–∏–ø | –†–∞–∑–º–µ—Ä | –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ | –§—É–Ω–∫—Ü–∏–π |\n';
  markdown += '|------|-----|--------|------------|----------|\n';
  
  data.files.forEach(file => {
    const fileName = file.name;
    const fileType = file.type || 'unknown';
    const fileSize = `${(file.size / 1024).toFixed(1)} KB`;
    const linesOfCode = file.lines_of_code || 0;
    const functionsCount = file.functions.length;
    
    markdown += `| \`${fileName}\` | ${fileType} | ${fileSize} | ${linesOfCode} | ${functionsCount} |\n`;
  });
  markdown += '\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
  if (options.includeDependencies && data.dependencies && data.dependencies.length > 0) {
    markdown += '## üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏\n\n';
    markdown += '| –ò—Å—Ç–æ—á–Ω–∏–∫ | –¶–µ–ª—å | –¢–∏–ø |\n';
    markdown += '|----------|------|-----|\n';
    
    data.dependencies.forEach(dep => {
      const from = dep.from.split('/').pop() || dep.from;
      const to = dep.to;
      const type = dep.type;
      markdown += `| \`${from}\` | \`${to}\` | ${type} |\n`;
    });
    markdown += '\n';
  }

  // –î–æ–±–∞–≤–ª—è–µ–º TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
  if (options.includeTodos && data.all_todos && data.all_todos.length > 0) {
    markdown += '## üìù TODO/FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n\n';
    
    data.all_todos.forEach(todo => {
      const fileName = todo.file_path.split('/').pop();
      const icon = todo.type === 'FIXME' ? 'üî¥' : todo.type === 'HACK' ? 'üü†' : 'üí°';
      
      markdown += `### ${icon} ${todo.type} –≤ \`${fileName}\`\n\n`;
      markdown += `**–°—Ç—Ä–æ–∫–∞:** ${todo.line}\n\n`;
      markdown += `**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${todo.content}\n\n`;
      markdown += `**–ü–æ–ª–Ω—ã–π –ø—É—Ç—å:** \`${todo.file_path}\`\n\n`;
      markdown += '---\n\n';
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
  if (options.includeDocumentation && data.project_documentation && data.project_documentation.length > 0) {
    markdown += '## üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑ –∫–æ–¥–∞\n\n';
    
    data.project_documentation.forEach(fileDoc => {
      const fileName = fileDoc.file_path.split('/').pop();
      markdown += `### –§–∞–π–ª: \`${fileName}\`\n\n`;
      
      if (fileDoc.functions.length === 0) {
        markdown += '_–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π._\n\n';
      } else {
        fileDoc.functions.forEach(func => {
          markdown += `#### –§—É–Ω–∫—Ü–∏—è: \`${func.name}\`\n\n`;
          
          if (func.description) {
            markdown += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${func.description}\n\n`;
          }
          
          if (func.params && func.params.length > 0) {
            markdown += '**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n\n';
            func.params.forEach(param => {
              const typeInfo = param.type ? ` (${param.type})` : '';
              markdown += `- \`${param.name}\`${typeInfo}: ${param.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
            });
            markdown += '\n';
          }
          
          if (func.returns) {
            const returnType = func.returns.type ? ` (${func.returns.type})` : '';
            markdown += `**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç${returnType}:** ${func.returns.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n`;
          }
          
          if (func.line_start) {
            markdown += `**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** —Å—Ç—Ä–æ–∫–∏ ${func.line_start}-${func.line_end || func.line_start}\n\n`;
          }
          
          markdown += '---\n\n';
        });
      }
    });
  }

  return markdown;
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 * 
 * –°–æ–∑–¥–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.
 * –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
 * 
 * @param projectPath - –ø—É—Ç—å –∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
 * @param format - —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
export const generateExportFilename = (projectPath: string, format: string): string => {
  const projectName = projectPath.split('/').pop() || 'project';
  const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
  const extension = format === 'json' ? 'json' : format === 'csv' ? 'csv' : 'md';
  
  return `${projectName}-analysis-${timestamp}.${extension}`;
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
 * 
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ "–¥–∏—Ä–∏–∂–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞", –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
 * —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞—è –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
 * 
 * @param data - –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
export const exportAnalysisData = (data: ProjectAnalysis, options: ExportOptions): void => {
  let content: string;
  let mimeType: string;
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ MIME —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞
  switch (options.format) {
    case 'json':
      content = exportToJson(data, options);
      mimeType = 'application/json;charset=utf-8';
      break;
    case 'csv':
      content = exportToCsv(data, options);
      mimeType = 'text/csv;charset=utf-8';
      break;
    case 'markdown':
      content = exportToMarkdown(data, options);
      mimeType = 'text/markdown;charset=utf-8';
      break;
    default:
      console.error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: ${options.format}`);
      return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
  const filename = generateExportFilename(data.project_path, options.format);
  downloadFile(content, filename, mimeType);
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
 * 
 * @param format - –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export const createDefaultExportOptions = (format: 'json' | 'csv' | 'markdown'): ExportOptions => ({
  format,
  includeMetrics: true,        // –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª–µ–∑–Ω—ã –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤
  includeDependencies: true,   // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
  includeTodos: true,          // TODO –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  includeDocumentation: true   // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ —Ü–µ–Ω–Ω–∞
});
