'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Brain, Code2, Lightbulb, BookOpen, Play } from 'lucide-react';

interface CodeExplanationProps {
  code?: string;
  language?: string;
  initialExplanation?: string;
}

export function CodeExplanation({ 
  code = '', 
  language = 'javascript',
  initialExplanation = ''
}: CodeExplanationProps) {
  const [inputCode, setInputCode] = useState(code);
  const [explanation, setExplanation] = useState(initialExplanation);
  const [isLoading, setIsLoading] = useState(false);
  const [concepts, setConcepts] = useState<string[]>([]);

  const explainCode = async () => {
    if (!inputCode.trim()) return;

    setIsLoading(true);
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI API
      // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º mock –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 1500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      
      const mockExplanation = generateMockExplanation(inputCode, language);
      const mockConcepts = extractConcepts(inputCode, language);
      
      setExplanation(mockExplanation);
      setConcepts(mockConcepts);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–¥–∞:', error);
      setExplanation('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞.');
    } finally {
      setIsLoading(false);
    }
  };

  const generateMockExplanation = (code: string, lang: string): string => {
    const patterns = {
      function: code.includes('function') || code.includes('=>'),
      component: code.includes('Component') || code.includes('return') && code.includes('<'),
      loop: code.includes('for') || code.includes('while') || code.includes('map'),
      conditional: code.includes('if') || code.includes('?'),
      async: code.includes('async') || code.includes('await') || code.includes('Promise'),
      import: code.includes('import') || code.includes('require'),
    };

    let explanation = `–≠—Ç–æ—Ç ${lang} –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n`;

    if (patterns.component) {
      explanation += "üîπ **React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç**: –ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSX —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.\n\n";
    }
    
    if (patterns.function) {
      explanation += "üîπ **–§—É–Ω–∫—Ü–∏—è**: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏.\n\n";
    }
    
    if (patterns.async) {
      explanation += "üîπ **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (API –∑–∞–ø—Ä–æ—Å—ã, —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏).\n\n";
    }
    
    if (patterns.loop) {
      explanation += "üîπ **–¶–∏–∫–ª—ã/–ò—Ç–µ—Ä–∞—Ü–∏–∏**: –ö–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n";
    }
    
    if (patterns.conditional) {
      explanation += "üîπ **–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –∫–æ–¥–µ.\n\n";
    }
    
    if (patterns.import) {
      explanation += "üîπ **–ò–º–ø–æ—Ä—Ç—ã**: –ü–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n";
    }

    explanation += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**\n";
    explanation += "- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∫–æ–¥–∞\n";
    explanation += "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n";
    explanation += "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏";

    return explanation;
  };

  const extractConcepts = (code: string, lang: string): string[] => {
    const concepts: string[] = [];
    
    if (code.includes('useState') || code.includes('useEffect')) {
      concepts.push('React Hooks');
    }
    if (code.includes('async') || code.includes('await')) {
      concepts.push('–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }
    if (code.includes('map') || code.includes('filter') || code.includes('reduce')) {
      concepts.push('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }
    if (code.includes('class') || code.includes('constructor')) {
      concepts.push('–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }
    if (code.includes('import') || code.includes('export')) {
      concepts.push('–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');
    }
    if (code.includes('<') && code.includes('>')) {
      concepts.push('JSX');
    }
    if (code.includes('fetch') || code.includes('axios')) {
      concepts.push('HTTP –∑–∞–ø—Ä–æ—Å—ã');
    }

    return concepts;
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5" />
            AI –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
          </CardTitle>
          <CardDescription>
            –ü–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="text-sm font-medium mb-2 block">
              –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
            </label>
            <Textarea
              placeholder={`// –ü—Ä–∏–º–µ—Ä ${language} –∫–æ–¥–∞\nfunction analyzeCode() {\n  return "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!";\n}`}
              value={inputCode}
              onChange={(e) => setInputCode(e.target.value)}
              className="min-h-[120px] font-mono text-sm"
            />
          </div>

          <Button 
            onClick={explainCode}
            disabled={isLoading || !inputCode.trim()}
            className="w-full"
          >
            {isLoading ? (
              <>
                <Brain className="h-4 w-4 mr-2 animate-pulse" />
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥...
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                –û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {explanation && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5 text-yellow-500" />
              –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none dark:prose-invert">
              {explanation.split('\n').map((line, index) => (
                <p key={index} className="mb-2">
                  {line}
                </p>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {concepts.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5 text-blue-500" />
              –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {concepts.map((concept) => (
                <Badge key={concept} variant="secondary" className="cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900">
                  {concept}
                </Badge>
              ))}
            </div>
            <p className="text-sm text-slate-600 dark:text-slate-400 mt-3">
              üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </p>
          </CardContent>
        </Card>
      )}

      {/* –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Code2 className="h-5 w-5 text-green-500" />
            –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
          </CardTitle>
          <CardDescription>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-3">
            {[
              {
                title: "React Hook useState",
                code: `const [count, setCount] = useState(0);

const increment = () => {
  setCount(count + 1);
};`
              },
              {
                title: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                code: `async function fetchData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}`
              },
              {
                title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                code: `const numbers = [1, 2, 3, 4, 5];

const result = numbers
  .filter(n => n % 2 === 0)
  .map(n => n * 2)
  .reduce((sum, n) => sum + n, 0);`
              }
            ].map((example, index) => (
              <div
                key={index}
                className="p-3 border rounded-lg cursor-pointer hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
                onClick={() => setInputCode(example.code)}
              >
                <div className="font-medium text-sm mb-1">{example.title}</div>
                <code className="text-xs text-slate-600 dark:text-slate-400 block">
                  {example.code.split('\n')[0]}...
                </code>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
