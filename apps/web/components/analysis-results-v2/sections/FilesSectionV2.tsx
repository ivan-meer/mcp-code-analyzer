/**
 * FilesSectionV2 - –°–µ–∫—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 * 
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å:
 * - –í–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
 * - –ü—Ä–µ–≤—å—é –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤
 */

import React, { useMemo, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, Filter, Grid, List, Eye, Code, FileText, 
  BarChart3, Clock, Zap, ChevronDown, ChevronRight,
  Copy, ExternalLink, Download, Share
} from 'lucide-react';
import { ProjectAnalysis } from '@/types/analysis.types';
import { AnalysisFilters } from '../hooks/useAnalysisState';

interface FilesSectionV2Props {
  analysisResult: ProjectAnalysis;
  onFileNavigate: (filePath: string, line?: number) => void;
  filters: AnalysisFilters;
  onFiltersChange: (filters: Partial<AnalysisFilters>) => void;
  searchQuery: string;
  viewMode: 'grid' | 'list' | 'detail';
  onViewModeChange: (mode: 'grid' | 'list' | 'detail') => void;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
const FileCard: React.FC<{
  file: ProjectAnalysis['files'][0];
  viewMode: 'grid' | 'list' | 'detail';
  onNavigate: (path: string) => void;
  searchQuery?: string;
}> = ({ file, viewMode, onNavigate, searchQuery }) => {
  const [expanded, setExpanded] = useState(false);

  const getFileIcon = (type: string) => {
    const iconMap: Record<string, string> = {
      'ts': 'üü¶', 'tsx': '‚öõÔ∏è', 'js': 'üü®', 'jsx': '‚öõÔ∏è',
      'py': 'üêç', 'css': 'üé®', 'html': 'üåê', 'json': 'üìã',
      'md': 'üìù', 'yml': '‚öôÔ∏è', 'yaml': '‚öôÔ∏è'
    };
    return iconMap[type.toLowerCase()] || 'üìÑ';
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const getSizeColor = (size: number) => {
    if (size < 1000) return 'text-green-400';
    if (size < 10000) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getComplexityColor = (functions: number) => {
    if (functions < 5) return 'text-green-400';
    if (functions < 15) return 'text-yellow-400';
    return 'text-red-400';
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      whileHover={{ y: -2 }}
      className={`
        glass-morphism border border-white/20 hover:border-white/30 
        transition-all duration-300 cursor-pointer group
        ${viewMode === 'grid' ? 'rounded-2xl p-4' : 
          viewMode === 'list' ? 'rounded-xl p-3 mb-2' : 
          'rounded-2xl p-6 mb-4'}
      `}
      onClick={() => onNavigate(file.path)}
    >
      <div className={`flex ${viewMode === 'grid' ? 'flex-col' : 'items-center'} gap-3`}>
        {/* –ò–∫–æ–Ω–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="flex items-center gap-3 flex-1">
          <div className="text-2xl">{getFileIcon(file.type)}</div>
          
          <div className="flex-1 min-w-0">
            <div className="flex items-center gap-2">
              <h3 className="font-medium text-white truncate group-hover:text-blue-300 transition-colors">
                {file.name}
              </h3>
              <span className="px-2 py-0.5 text-xs bg-white/10 rounded text-white/70">
                {file.type.toUpperCase()}
              </span>
            </div>
            <p className="text-sm text-white/60 truncate font-mono">
              {file.path}
            </p>
          </div>
        </div>

        {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
        <div className={`flex ${viewMode === 'grid' ? 'justify-between' : 'gap-6'} text-sm`}>
          <div className="flex items-center gap-1">
            <BarChart3 className="h-3 w-3 text-blue-400" />
            <span className={getSizeColor(file.size)}>{formatFileSize(file.size)}</span>
          </div>
          
          {file.lines_of_code && (
            <div className="flex items-center gap-1">
              <FileText className="h-3 w-3 text-green-400" />
              <span className="text-white/70">{file.lines_of_code}</span>
            </div>
          )}
          
          <div className="flex items-center gap-1">
            <Code className={`h-3 w-3 ${getComplexityColor(file.functions.length)}`} />
            <span className="text-white/70">{file.functions.length}</span>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {viewMode === 'detail' && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="w-full mt-4 pt-4 border-t border-white/10"
          >
            {/* –§—É–Ω–∫—Ü–∏–∏ */}
            {file.functions.length > 0 && (
              <div className="mb-3">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setExpanded(!expanded);
                  }}
                  className="flex items-center gap-2 text-sm text-white/80 hover:text-white transition-colors"
                >
                  {expanded ? <ChevronDown className="h-3 w-3" /> : <ChevronRight className="h-3 w-3" />}
                  –§—É–Ω–∫—Ü–∏–∏ ({file.functions.length})
                </button>
                
                <AnimatePresence>
                  {expanded && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="mt-2 space-y-1"
                    >
                      {file.functions.slice(0, 5).map((func, index) => (
                        <div key={index} className="text-xs text-white/60 font-mono pl-4">
                          ‚Ä¢ {func}
                        </div>
                      ))}
                      {file.functions.length > 5 && (
                        <div className="text-xs text-white/40 pl-4">
                          +{file.functions.length - 5} –µ—â–µ...
                        </div>
                      )}
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            )}

            {/* –ò–º–ø–æ—Ä—Ç—ã */}
            {file.imports.length > 0 && (
              <div className="mb-3">
                <div className="text-sm text-white/80 mb-1">
                  –ò–º–ø–æ—Ä—Ç—ã ({file.imports.length})
                </div>
                <div className="flex flex-wrap gap-1">
                  {file.imports.slice(0, 3).map((imp, index) => (
                    <span key={index} className="px-2 py-0.5 text-xs bg-blue-500/20 text-blue-300 rounded">
                      {imp}
                    </span>
                  ))}
                  {file.imports.length > 3 && (
                    <span className="px-2 py-0.5 text-xs bg-white/10 text-white/60 rounded">
                      +{file.imports.length - 3}
                    </span>
                  )}
                </div>
              </div>
            )}

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className="flex gap-2">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  navigator.clipboard.writeText(file.path);
                }}
                className="p-1 rounded bg-white/10 hover:bg-white/20 transition-colors"
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å"
              >
                <Copy className="h-3 w-3" />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onNavigate(file.path);
                }}
                className="p-1 rounded bg-white/10 hover:bg-white/20 transition-colors"
                title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª"
              >
                <ExternalLink className="h-3 w-3" />
              </button>
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
export const FilesSectionV2: React.FC<FilesSectionV2Props> = ({
  analysisResult,
  onFileNavigate,
  filters,
  onFiltersChange,
  searchQuery,
  viewMode,
  onViewModeChange
}) => {
  const [sortBy, setSortBy] = useState<'name' | 'size' | 'functions' | 'type'>('name');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
  const filteredAndSortedFiles = useMemo(() => {
    let files = [...analysisResult.files];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters.fileTypes.length > 0) {
      files = files.filter(file => filters.fileTypes.includes(file.type));
    }

    if (filters.languages.length > 0) {
      files = files.filter(file => filters.languages.includes(file.type));
    }

    if (filters.sizeRange[0] > 0 || filters.sizeRange[1] < Infinity) {
      files = files.filter(file => 
        file.size >= filters.sizeRange[0] && file.size <= filters.sizeRange[1]
      );
    }

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      files = files.filter(file =>
        file.name.toLowerCase().includes(query) ||
        file.path.toLowerCase().includes(query) ||
        file.functions.some(func => func.toLowerCase().includes(query)) ||
        file.imports.some(imp => imp.toLowerCase().includes(query))
      );
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    files.sort((a, b) => {
      let aVal: any, bVal: any;
      
      switch (sortBy) {
        case 'size':
          aVal = a.size;
          bVal = b.size;
          break;
        case 'functions':
          aVal = a.functions.length;
          bVal = b.functions.length;
          break;
        case 'type':
          aVal = a.type;
          bVal = b.type;
          break;
        case 'name':
        default:
          aVal = a.name.toLowerCase();
          bVal = b.name.toLowerCase();
      }

      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });

    return files;
  }, [analysisResult.files, filters, searchQuery, sortBy, sortDirection]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const stats = useMemo(() => {
    const files = filteredAndSortedFiles;
    const totalSize = files.reduce((sum, file) => sum + file.size, 0);
    const totalFunctions = files.reduce((sum, file) => sum + file.functions.length, 0);
    const avgSize = files.length > 0 ? totalSize / files.length : 0;
    
    const types = files.reduce((acc, file) => {
      acc[file.type] = (acc[file.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      totalFiles: files.length,
      totalSize,
      totalFunctions,
      avgSize,
      types: Object.entries(types).sort(([,a], [,b]) => b - a)
    };
  }, [filteredAndSortedFiles]);

  const handleSortChange = useCallback((newSortBy: typeof sortBy) => {
    if (newSortBy === sortBy) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(newSortBy);
      setSortDirection('asc');
    }
  }, [sortBy]);

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="glass-morphism rounded-2xl p-6 border border-white/20">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h2 className="text-2xl font-bold text-white mb-2">–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞</h2>
            <p className="text-white/70">
              –ù–∞–π–¥–µ–Ω–æ {stats.totalFiles} —Ñ–∞–π–ª–æ–≤, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä {formatFileSize(stats.totalSize)}
            </p>
          </div>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
          <div className="flex gap-2">
            <button
              onClick={() => onViewModeChange('grid')}
              className={`p-2 rounded-lg transition-colors ${
                viewMode === 'grid' 
                  ? 'bg-blue-500/30 text-blue-300' 
                  : 'bg-white/10 text-white/60 hover:bg-white/20'
              }`}
            >
              <Grid className="h-4 w-4" />
            </button>
            <button
              onClick={() => onViewModeChange('list')}
              className={`p-2 rounded-lg transition-colors ${
                viewMode === 'list' 
                  ? 'bg-blue-500/30 text-blue-300' 
                  : 'bg-white/10 text-white/60 hover:bg-white/20'
              }`}
            >
              <List className="h-4 w-4" />
            </button>
            <button
              onClick={() => onViewModeChange('detail')}
              className={`p-2 rounded-lg transition-colors ${
                viewMode === 'detail' 
                  ? 'bg-blue-500/30 text-blue-300' 
                  : 'bg-white/10 text-white/60 hover:bg-white/20'
              }`}
            >
              <Eye className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white/5 rounded-lg p-3">
            <div className="text-lg font-bold text-blue-400">{stats.totalFiles}</div>
            <div className="text-sm text-white/60">–§–∞–π–ª–æ–≤</div>
          </div>
          <div className="bg-white/5 rounded-lg p-3">
            <div className="text-lg font-bold text-green-400">{stats.totalFunctions}</div>
            <div className="text-sm text-white/60">–§—É–Ω–∫—Ü–∏–π</div>
          </div>
          <div className="bg-white/5 rounded-lg p-3">
            <div className="text-lg font-bold text-yellow-400">{formatFileSize(stats.avgSize)}</div>
            <div className="text-sm text-white/60">–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä</div>
          </div>
          <div className="bg-white/5 rounded-lg p-3">
            <div className="text-lg font-bold text-purple-400">{stats.types.length}</div>
            <div className="text-sm text-white/60">–¢–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤</div>
          </div>
        </div>

        {/* –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ */}
        <div className="mt-4 flex flex-wrap gap-2">
          {stats.types.slice(0, 8).map(([type, count]) => (
            <span key={type} className="px-3 py-1 bg-white/10 rounded-lg text-sm text-white/80">
              {type.toUpperCase()} ({count})
            </span>
          ))}
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="glass-morphism rounded-xl p-4 border border-white/20">
        <div className="flex flex-wrap items-center gap-4">
          {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <div className="flex items-center gap-2">
            <span className="text-sm text-white/80">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
            <div className="flex gap-1">
              {[
                { key: 'name', label: '–ò–º—è' },
                { key: 'size', label: '–†–∞–∑–º–µ—Ä' },
                { key: 'functions', label: '–§—É–Ω–∫—Ü–∏–∏' },
                { key: 'type', label: '–¢–∏–ø' }
              ].map(({ key, label }) => (
                <button
                  key={key}
                  onClick={() => handleSortChange(key as typeof sortBy)}
                  className={`px-3 py-1 text-sm rounded-lg transition-colors ${
                    sortBy === key
                      ? 'bg-blue-500/30 text-blue-300'
                      : 'bg-white/10 text-white/60 hover:bg-white/20'
                  }`}
                >
                  {label}
                  {sortBy === key && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? '‚Üë' : '‚Üì'}
                    </span>
                  )}
                </button>
              ))}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
          <div className="ml-auto text-sm text-white/60">
            –ü–æ–∫–∞–∑–∞–Ω–æ {filteredAndSortedFiles.length} –∏–∑ {analysisResult.files.length} —Ñ–∞–π–ª–æ–≤
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
      <AnimatePresence mode="wait">
        <motion.div
          key={viewMode}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className={
            viewMode === 'grid'
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
              : 'space-y-2'
          }
        >
          {filteredAndSortedFiles.map((file, index) => (
            <FileCard
              key={file.path}
              file={file}
              viewMode={viewMode}
              onNavigate={onFileNavigate}
              searchQuery={searchQuery}
            />
          ))}
        </motion.div>
      </AnimatePresence>

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {filteredAndSortedFiles.length === 0 && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="glass-morphism rounded-2xl p-12 border border-white/20 text-center"
        >
          <div className="text-6xl mb-4">üîç</div>
          <h3 className="text-xl font-semibold text-white mb-2">
            –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-white/70">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
          </p>
        </motion.div>
      )}
    </div>
  );
};

export default FilesSectionV2;
