'use client';

import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Network, ZoomIn, ZoomOut, RotateCcw } from 'lucide-react';

interface ProjectData {
  files: Array<{
    path: string;
    name: string;
    type: string;
    size: number;
    lines_of_code?: number;
    functions: string[];
  }>;
  dependencies: Array<{
    from: string;
    to: string;
    type: string;
  }>;
  metrics: {
    total_files: number;
    total_lines: number;
    languages: string[];
  };
}

interface Node {
  id: string;
  name: string;
  type: string;
  size: number;
  group: string;
}

interface Link {
  source: string;
  target: string;
  type: string;
}

export function ProjectVisualization({ data }: { data: ProjectData }) {
  const svgRef = useRef<SVGSVGElement>(null);
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);

  useEffect(() => {
    if (!svgRef.current || !data) return;

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    d3.select(svgRef.current).selectAll('*').remove();

    const width = 800;
    const height = 600;

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è D3
    const nodes: Node[] = data.files.map(file => ({
      id: file.path,
      name: file.name,
      type: file.type,
      size: file.lines_of_code || 10,
      group: file.type
    }));

    const links: Link[] = data.dependencies
      .filter(dep => nodes.some(n => n.id === dep.from))
      .map(dep => ({
        source: dep.from,
        target: dep.to,
        type: dep.type
      }));

    // –°–æ–∑–¥–∞–µ–º SVG
    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [0, 0, width, height]);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
    svg.append('defs').append('marker')
      .attr('id', 'arrowhead')
      .attr('viewBox', '-0 -5 10 10') // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–∞
      .attr('refX', 15) // –°–º–µ—â–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –æ—Ç –∫–æ–Ω—Ü–∞ –ª–∏–Ω–∏–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–¥–∏—É—Å–∞ —É–∑–ª–∞)
      .attr('refY', 0)
      .attr('orient', 'auto')
      .attr('markerWidth', 6) // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏
      .attr('markerHeight', 6)
      .attr('xoverflow', 'visible')
      .append('svg:path')
      .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
      .attr('fill', '#6B7280') // –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ (—Å–µ—Ä—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã)
      .style('stroke','none');

    // –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    const simulation = d3.forceSimulation(nodes as d3.SimulationNodeDatum[])
      .force('link', d3.forceLink(links).id((d: any) => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2));

    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    const colorScale = d3.scaleOrdinal()
      .domain(['ts', 'tsx', 'js', 'jsx', 'py', 'css', 'html', 'json'])
      .range(['#3178c6', '#61dafb', '#f7df1e', '#61dafb', '#3776ab', '#1572b6', '#e34f26', '#000000']);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    const zoom = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.1, 8])
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
      });

    svg.call(zoom);

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä–∞—Ñ–∞
    const g = svg.append('g');

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
    const link = svg.append('g')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .selectAll('line')
      .data(links)
      .join('line')
      .attr('stroke-width', 1);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    const node = g.append('g')
      .selectAll('circle')
      .data(nodes)
      .join('circle')
      .attr('r', (d: Node) => Math.max(5, Math.min(20, d.size / 20))
      .attr('fill', (d: Node) => { {
        const color = colorScale(d.type);
        return typeof color === 'string' ? color : '#cccccc';
      })
      .attr('stroke', '#fff')
      .attr('stroke-width', 2)
      .style('cursor', 'pointer')
      .call(d3.drag<SVGCircleElement, Node>()
        .on('start', (event, d) => {
          if (!event.active) simulation.alphaTarget(0.3).restart();
          (d as any).fx = (d as any).x;
          (d as any).fy = (d as any).y;
        })
        .on('drag', (event, d) => {
          (d as any).fx = event.x;
          (d as any).fy = event.y;
        })
        .on('end', (event, d) => {
          if (!event.active) simulation.alphaTarget(0);
          (d as any).fx = null;
          (d as any).fy = null;
        })
      ));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    const label = g.append('g')
      .selectAll('text')
      .data(nodes)
      .join('text')
      .text((d: Node) => d.name.length > 15 ? d.name.slice(0, 12) + '...' : d.name)
      .attr('font-size', '10px')
      .attr('text-anchor', 'middle')
      .attr('dy', '0.35em')
      .style('pointer-events', 'none');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    node.on('click', (event, d) => {
      setSelectedNode(d);
    });

    node.on('mouseover', function(event, d) {
      d3.select(this).attr('stroke-width', 4);
    });

    node.on('mouseout', function(event, d) {
      d3.select(this).attr('stroke-width', 2);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);

      node
        .attr('cx', (d: any) => d.x)
        .attr('cy', (d: any) => d.y);

      label
        .attr('x', (d: any) => d.x)
        .attr('y', (d: any) => d.y);
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      simulation.stop();
    };
  }, [data]);

  if (!data) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Network className="h-5 w-5" />
            –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
          </CardTitle>
          <CardDescription>
            –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="mb-4 flex flex-wrap gap-2">
            <div className="text-sm text-slate-600 dark:text-slate-400">–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:</div>
            {data.metrics.languages.map(lang => (
              <Badge key={lang} variant="outline" className="text-xs">
                {lang}
              </Badge>
            ))}
          </div>
          
          <div className="relative">
            <svg ref={svgRef} className="border rounded-lg bg-white dark:bg-slate-900"></svg>
            
            {selectedNode && (
              <div className="absolute top-4 right-4 bg-white dark:bg-slate-800 border rounded-lg p-3 shadow-lg max-w-xs">
                <h4 className="font-semibold text-sm mb-2">{selectedNode.name}</h4>
                <div className="space-y-1 text-xs text-slate-600 dark:text-slate-400">
                  <div>–¢–∏–ø: <span className="font-medium">{selectedNode.type}</span></div>
                  <div>–†–∞–∑–º–µ—Ä: <span className="font-medium">{selectedNode.size} —Å—Ç—Ä–æ–∫</span></div>
                  <div>–ü—É—Ç—å: <span className="font-mono text-xs">{selectedNode.id}</span></div>
                </div>
              </div>
            )}
          </div>
          
          <div className="mt-4 text-xs text-slate-500">
            üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —É–∑–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è.
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
